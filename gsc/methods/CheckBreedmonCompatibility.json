{"names":["CheckBreedmonCompatibility"],"callingMethods":["DayCareMonCompatibilityText"],"methodsCalled":["GetBaseData","Predef"],"methodAddressesUsed":[],"varsSet":["wBreedingCompatibility","wCurPartySpecies","wCurSpecies","wMonType","wTempMonDVs"],"varsUsed":["wBaseEggGroups","wBreedMon1DVs","wBreedMon1ID","wBreedMon1Species","wBreedMon2DVs","wBreedMon2ID","wBreedMon2Species"],"varAddressesUsed":["GetGenderPredef"],"constantsUsed":["TEMPMON"],"lines":["CheckBreedmonCompatibility:","\tcall .CheckBreedingGroupCompatibility","\tld c, $0","\tjp nc, .done","\tld a, [wBreedMon1Species]","\tld [wCurPartySpecies], a","\tld a, [wBreedMon1DVs]","\tld [wTempMonDVs], a","\tld a, [wBreedMon1DVs + 1]","\tld [wTempMonDVs + 1], a","\tld a, TEMPMON","\tld [wMonType], a","\tpredef GetGender","\tjr c, .genderless","\tld b, $1","\tjr nz, .breedmon2","\tinc b","",".breedmon2","\tpush bc","\tld a, [wBreedMon2Species]","\tld [wCurPartySpecies], a","\tld a, [wBreedMon2DVs]","\tld [wTempMonDVs], a","\tld a, [wBreedMon2DVs + 1]","\tld [wTempMonDVs + 1], a","\tld a, TEMPMON","\tld [wMonType], a","\tpredef GetGender","\tpop bc","\tjr c, .genderless","\tld a, $1","\tjr nz, .compare_gender","\tinc a","",".compare_gender","\tcp b","\tjr nz, .compute","",".genderless","\tld c, $0","\tld a, [wBreedMon1Species]","\tcp DITTO","\tjr z, .ditto1","\tld a, [wBreedMon2Species]","\tcp DITTO","\tjr nz, .done","\tjr .compute","",".ditto1","\tld a, [wBreedMon2Species]","\tcp DITTO","\tjr z, .done","",".compute","\tcall .CheckDVs","\tld c, 255","\tjp z, .done","\tld a, [wBreedMon2Species]","\tld b, a","\tld a, [wBreedMon1Species]","\tcp b","\tld c, 254","\tjr z, .compare_ids","\tld c, 128",".compare_ids","\t; Speed up","\tld a, [wBreedMon1ID]","\tld b, a","\tld a, [wBreedMon2ID]","\tcp b","\tjr nz, .done","\tld a, [wBreedMon1ID + 1]","\tld b, a","\tld a, [wBreedMon2ID + 1]","\tcp b","\tjr nz, .done","\tld a, c","\tsub 77","\tld c, a","",".done","\tld a, c","\tld [wBreedingCompatibility], a","\tret","",".CheckDVs:","; If Defense DVs match and the lower 3 bits of the Special DVs match,","; avoid breeding","\tld a, [wBreedMon1DVs]","\tand %1111","\tld b, a","\tld a, [wBreedMon2DVs]","\tand %1111","\tcp b","\tret nz","\tld a, [wBreedMon1DVs + 1]","\tand %111","\tld b, a","\tld a, [wBreedMon2DVs + 1]","\tand %111","\tcp b","\tret","",".CheckBreedingGroupCompatibility:","; If either mon is in the No Eggs group,","; they are not compatible.","\tld a, [wBreedMon2Species]","\tld [wCurSpecies], a","\tcall GetBaseData","\tld a, [wBaseEggGroups]","\tcp EGG_NONE * $11","\tjr z, .Incompatible","","\tld a, [wBreedMon1Species]","\tld [wCurSpecies], a","\tcall GetBaseData","\tld a, [wBaseEggGroups]","\tcp EGG_NONE * $11","\tjr z, .Incompatible","","; Ditto is automatically compatible with everything.","; If not Ditto, load the breeding groups into b/c and d/e.","\tld a, [wBreedMon2Species]","\tcp DITTO","\tjr z, .Compatible","\tld [wCurSpecies], a","\tcall GetBaseData","\tld a, [wBaseEggGroups]","\tpush af","\tand $f","\tld b, a","\tpop af","\tand $f0","\tswap a","\tld c, a","","\tld a, [wBreedMon1Species]","\tcp DITTO","\tjr z, .Compatible","\tld [wCurSpecies], a","\tpush bc","\tcall GetBaseData","\tpop bc","\tld a, [wBaseEggGroups]","\tpush af","\tand $f","\tld d, a","\tpop af","\tand $f0","\tswap a","\tld e, a","","\tld a, d","\tcp b","\tjr z, .Compatible","\tcp c","\tjr z, .Compatible","","\tld a, e","\tcp b","\tjr z, .Compatible","\tcp c","\tjr z, .Compatible","",".Incompatible:","\tand a","\tret","",".Compatible:","\tscf","\tret"],"name":"CheckBreedmonCompatibility","file":"engine/pokemon/breeding.asm","lineNo":1,"address":96075,"addressUsedBy":["DayCareStep","DayCare_InitBreeding"]}