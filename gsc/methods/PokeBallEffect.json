{"names":["PokeBallEffect"],"callingMethods":[],"methodsCalled":["AddNTimes","Ball_BoxIsFullMessage","CheckCaughtMon","CheckReceivedDex","ClearBGPalettes","ClearSprites","ClearTilemap","CloseSRAM","CopyBytes","DelayFrames","Divide","FarCall","GetPokemonName","InitName","LoadStandardFont","Multiply","OpenSRAM","Predef","PrintText","Random","ReturnToBattle_UseBall","RotateThreePalettesRight","SetSeenAndCaughtMon","TossItem","UseBallInTrainerBattle","YesNoBox"],"methodAddressesUsed":["BugContest_SetCaughtContestMon","GetItemHeldEffect","LoadEnemyMon","NamingScreen","SetBoxMonCaughtData","SetCaughtData","StubbedTrainerRankings_WildMonsCaught","Text_GotchaMonWasCaught"],"varsSet":["hBattleTurn","hDividend","hDivisor","hMultiplicand","hMultiplier","sBoxMon1Happiness","wBattleAnimParam","wBuffer1","wBuffer2","wCurPartyLevel","wCurPartyMon","wCurPartySpecies","wEnemySubStatus5","wFXAnimID","wItemQuantityChangeBuffer","wMonType","wNamedObjectIndexBuffer","wNumHits","wTempEnemyMonSpecies","wTempSpecies","wWildMon"],"varsUsed":["hQuotient","sBoxCount","wBattleMode","wBattleMonItem","wBattleType","wBuffer2","wCurItem","wCurPartySpecies","wEnemyMonCatchRate","wEnemyMonDVs","wEnemyMonLevel","wEnemyMonSpecies","wEnemyMonStatus","wPartyCount","wTempEnemyMonSpecies","wTempSpecies","wWildMon"],"varAddressesUsed":["AskGiveNicknameText","BallAlmostHadItText","BallAppearedCaughtText","BallBrokeFreeText","BallMultiplierFunctionTable","BallSentToPCText","BallSoCloseText","ItemUsedText","NewDexDataText","NewPokedexEntryPredef","PlayBattleAnimPredef","SendMonIntoBoxPredef","TryAddMonToPartyPredef","sBoxCount","sBoxMonNicknames","wBattleResult","wEnemyBackupDVs","wEnemyMonHP","wEnemyMonItem","wEnemyMonMoves","wEnemyMonPP","wEnemyMonStatus","wEnemySubStatus5","wNumItems","wOptions","wPartyMon1Happiness","wPartyMonNicknames","wStringBuffer1","wWildMonMoves","wWildMonPP"],"constantsUsed":["ANIM_THROW_POKE_BALL","BOXMON","DITTO","FRIEND_BALL_HAPPINESS","MON_NAME_LENGTH","NAME_MON","NUM_MOVES","PARTYMON_STRUCT_LENGTH","POKE_BALL"],"lines":["PokeBallEffect:","\tld a, [wBattleMode]","\tdec a","\tjp nz, UseBallInTrainerBattle","","\tld a, [wPartyCount]","\tcp PARTY_LENGTH","\tjr nz, .room_in_party","","\tld a, BANK(sBoxCount)","\tcall OpenSRAM","\tld a, [sBoxCount]","\tcp MONS_PER_BOX","\tcall CloseSRAM","\tjp z, Ball_BoxIsFullMessage","",".room_in_party","\txor a","\tld [wWildMon], a","\tld a, [wCurItem]","\tcp PARK_BALL","\tcall nz, ReturnToBattle_UseBall","","\tld hl, wOptions","\tres NO_TEXT_SCROLL, [hl]","\tld hl, ItemUsedText","\tcall PrintText","","\tld a, [wEnemyMonCatchRate]","\tld b, a","\tld a, [wBattleType]","\tcp BATTLETYPE_TUTORIAL","\tjp z, .catch_without_fail","\tld a, [wCurItem]","\tcp MASTER_BALL","\tjp z, .catch_without_fail","\tld a, [wCurItem]","\tld c, a","\tld hl, BallMultiplierFunctionTable","",".get_multiplier_loop","\tld a, [hli]","\tcp $ff","\tjr z, .skip_or_return_from_ball_fn","\tcp c","\tjr z, .call_ball_function","\tinc hl","\tinc hl","\tjr .get_multiplier_loop","",".call_ball_function","\tld a, [hli]","\tld h, [hl]","\tld l, a","\tld de, .skip_or_return_from_ball_fn","\tpush de","\tjp hl","",".skip_or_return_from_ball_fn","\tld a, [wCurItem]","\tcp LEVEL_BALL","\tld a, b","\tjp z, .skip_hp_calc","","\tld a, b","\tldh [hMultiplicand + 2], a","","\tld hl, wEnemyMonHP","\tld b, [hl]","\tinc hl","\tld c, [hl]","\tinc hl","\tld d, [hl]","\tinc hl","\tld e, [hl]","\tsla c","\trl b","","\tld h, d","\tld l, e","\tadd hl, de","\tadd hl, de","\tld d, h","\tld e, l","\tld a, d","\tand a","\tjr z, .okay_1","","\tsrl d","\trr e","\tsrl d","\trr e","\tsrl b","\trr c","\tsrl b","\trr c","","\tld a, c","\tand a","\tjr nz, .okay_1","\tld c, $1",".okay_1","\tld b, e","","\tpush bc","\tld a, b","\tsub c","\tldh [hMultiplier], a","\txor a","\tldh [hDividend + 0], a","\tldh [hMultiplicand + 0], a","\tldh [hMultiplicand + 1], a","\tcall Multiply","\tpop bc","","\tld a, b","\tldh [hDivisor], a","\tld b, 4","\tcall Divide","","\tldh a, [hQuotient + 3]","\tand a","\tjr nz, .statuscheck","\tld a, 1",".statuscheck","; This routine is buggy. It was intended that SLP and FRZ provide a higher","; catch rate than BRN/PSN/PAR, which in turn provide a higher catch rate than","; no status effect at all. But instead, it makes BRN/PSN/PAR provide no","; benefit.","; Uncomment the line below to fix this.","\tld b, a","\tld a, [wEnemyMonStatus]","\tand 1 \u003c\u003c FRZ | SLP","\tld c, 10","\tjr nz, .addstatus","\t; ld a, [wEnemyMonStatus]","\tand a","\tld c, 5","\tjr nz, .addstatus","\tld c, 0",".addstatus","\tld a, b","\tadd c","\tjr nc, .max_1","\tld a, $ff",".max_1","","\t; BUG: farcall overwrites a, and GetItemHeldEffect takes b anyway.","\t; This is probably the reason the HELD_CATCH_CHANCE effect is never used.","\t; Uncomment the line below to fix.","\tld d, a","\tpush de","\tld a, [wBattleMonItem]","\t; ld b, a","\tfarcall GetItemHeldEffect","\tld a, b","\tcp HELD_CATCH_CHANCE","\tpop de","\tld a, d","\tjr nz, .max_2","\tadd c","\tjr nc, .max_2","\tld a, $ff",".max_2","",".skip_hp_calc","\tld b, a","\tld [wBuffer1], a","\tcall Random","","\tcp b","\tld a, 0","\tjr z, .catch_without_fail","\tjr nc, .fail_to_catch","",".catch_without_fail","\tld a, [wEnemyMonSpecies]","",".fail_to_catch","\tld [wWildMon], a","\tld c, 20","\tcall DelayFrames","","\tld a, [wCurItem]","\tcp POKE_BALL + 1 ; Assumes Master/Ultra/Great come before","\tjr c, .not_kurt_ball","\tld a, POKE_BALL",".not_kurt_ball","\tld [wBattleAnimParam], a","","\tld de, ANIM_THROW_POKE_BALL","\tld a, e","\tld [wFXAnimID], a","\tld a, d","\tld [wFXAnimID + 1], a","\txor a","\tldh [hBattleTurn], a","\tld [wBuffer2], a","\tld [wNumHits], a","\tpredef PlayBattleAnim","","\tld a, [wWildMon]","\tand a","\tjr nz, .caught","\tld a, [wBuffer2]","\tcp $1","\tld hl, BallBrokeFreeText","\tjp z, .shake_and_break_free","\tcp $2","\tld hl, BallAppearedCaughtText","\tjp z, .shake_and_break_free","\tcp $3","\tld hl, BallAlmostHadItText","\tjp z, .shake_and_break_free","\tcp $4","\tld hl, BallSoCloseText","\tjp z, .shake_and_break_free",".caught","","\tld hl, wEnemyMonStatus","\tld a, [hli]","\tpush af","\tinc hl","\tld a, [hli]","\tpush af","\tld a, [hl]","\tpush af","\tpush hl","\tld hl, wEnemyMonItem","\tld a, [hl]","\tpush af","\tpush hl","\tld hl, wEnemySubStatus5","\tld a, [hl]","\tpush af","\tset SUBSTATUS_TRANSFORMED, [hl]","","; This code is buggy. Any wild Pok√©mon that has Transformed will be","; caught as a Ditto, even if it was something else like Mew.","; To fix, do not set [wTempEnemyMonSpecies] to DITTO.","\tbit SUBSTATUS_TRANSFORMED, a","\tjr nz, .ditto","\tjr .not_ditto","",".ditto","\tld a, DITTO","\tld [wTempEnemyMonSpecies], a","\tjr .load_data","",".not_ditto","\tset SUBSTATUS_TRANSFORMED, [hl]","\tld hl, wEnemyBackupDVs","\tld a, [wEnemyMonDVs]","\tld [hli], a","\tld a, [wEnemyMonDVs + 1]","\tld [hl], a","",".load_data","\tld a, [wTempEnemyMonSpecies]","\tld [wCurPartySpecies], a","\tld a, [wEnemyMonLevel]","\tld [wCurPartyLevel], a","\tfarcall LoadEnemyMon","","\tpop af","\tld [wEnemySubStatus5], a","","\tpop hl","\tpop af","\tld [hl], a","\tpop hl","\tpop af","\tld [hld], a","\tpop af","\tld [hld], a","\tdec hl","\tpop af","\tld [hl], a","","\tld hl, wEnemySubStatus5","\tbit SUBSTATUS_TRANSFORMED, [hl]","\tjr nz, .Transformed","\tld hl, wWildMonMoves","\tld de, wEnemyMonMoves","\tld bc, NUM_MOVES","\tcall CopyBytes","","\tld hl, wWildMonPP","\tld de, wEnemyMonPP","\tld bc, NUM_MOVES","\tcall CopyBytes","",".Transformed:","\tld a, [wEnemyMonSpecies]","\tld [wWildMon], a","\tld [wCurPartySpecies], a","\tld [wTempSpecies], a","\tld a, [wBattleType]","\tcp BATTLETYPE_TUTORIAL","\tjp z, .FinishTutorial","","\tfarcall StubbedTrainerRankings_WildMonsCaught","","\tld hl, Text_GotchaMonWasCaught","\tcall PrintText","","\tcall ClearSprites","","\tld a, [wTempSpecies]","\tdec a","\tcall CheckCaughtMon","","\tld a, c","\tpush af","\tld a, [wTempSpecies]","\tdec a","\tcall SetSeenAndCaughtMon","\tpop af","\tand a","\tjr nz, .skip_pokedex","","\tcall CheckReceivedDex","\tjr z, .skip_pokedex","","\tld hl, NewDexDataText","\tcall PrintText","","\tcall ClearSprites","","\tld a, [wEnemyMonSpecies]","\tld [wTempSpecies], a","\tpredef NewPokedexEntry","",".skip_pokedex","\tld a, [wBattleType]","\tcp BATTLETYPE_CONTEST","\tjp z, .catch_bug_contest_mon","\tcp BATTLETYPE_CELEBI","\tjr nz, .not_celebi","\tld hl, wBattleResult","\tset BATTLERESULT_CAUGHT_CELEBI, [hl]",".not_celebi","","\tld a, [wPartyCount]","\tcp PARTY_LENGTH","\tjr z, .SendToPC","","\txor a ; PARTYMON","\tld [wMonType], a","\tcall ClearSprites","","\tpredef TryAddMonToParty","","\tfarcall SetCaughtData","","\tld a, [wCurItem]","\tcp FRIEND_BALL","\tjr nz, .SkipPartyMonFriendBall","","\tld a, [wPartyCount]","\tdec a","\tld hl, wPartyMon1Happiness","\tld bc, PARTYMON_STRUCT_LENGTH","\tcall AddNTimes","","\tld a, FRIEND_BALL_HAPPINESS","\tld [hl], a","",".SkipPartyMonFriendBall:","\tld hl, AskGiveNicknameText","\tcall PrintText","","\tld a, [wCurPartySpecies]","\tld [wNamedObjectIndexBuffer], a","\tcall GetPokemonName","","\tcall YesNoBox","\tjp c, .return_from_capture","","\tld a, [wPartyCount]","\tdec a","\tld [wCurPartyMon], a","\tld hl, wPartyMonNicknames","\tld bc, MON_NAME_LENGTH","\tcall AddNTimes","","\tld d, h","\tld e, l","\tpush de","\txor a ; PARTYMON","\tld [wMonType], a","\tld b, NAME_MON","\tfarcall NamingScreen","","\tcall RotateThreePalettesRight","","\tcall LoadStandardFont","","\tpop hl","\tld de, wStringBuffer1","\tcall InitName","","\tjp .return_from_capture","",".SendToPC:","\tcall ClearSprites","","\tpredef SendMonIntoBox","","\tfarcall SetBoxMonCaughtData","","\tld a, BANK(sBoxCount)","\tcall OpenSRAM","","\tld a, [sBoxCount]","\tcp MONS_PER_BOX","\tjr nz, .BoxNotFullYet","\tld hl, wBattleResult","\tset BATTLERESULT_BOX_FULL, [hl]",".BoxNotFullYet:","\tld a, [wCurItem]","\tcp FRIEND_BALL","\tjr nz, .SkipBoxMonFriendBall","\t; The captured mon is now first in the box","\tld a, FRIEND_BALL_HAPPINESS","\tld [sBoxMon1Happiness], a",".SkipBoxMonFriendBall:","\tcall CloseSRAM","","\tld hl, AskGiveNicknameText","\tcall PrintText","","\tld a, [wCurPartySpecies]","\tld [wNamedObjectIndexBuffer], a","\tcall GetPokemonName","","\tcall YesNoBox","\tjr c, .SkipBoxMonNickname","","\txor a","\tld [wCurPartyMon], a","\tld a, BOXMON","\tld [wMonType], a","\tld de, wMonOrItemNameBuffer","\tld b, NAME_MON","\tfarcall NamingScreen","","\tld a, BANK(sBoxMonNicknames)","\tcall OpenSRAM","","\tld hl, wMonOrItemNameBuffer","\tld de, sBoxMonNicknames","\tld bc, MON_NAME_LENGTH","\tcall CopyBytes","","\tld hl, sBoxMonNicknames","\tld de, wStringBuffer1","\tcall InitName","","\tcall CloseSRAM","",".SkipBoxMonNickname:","\tld a, BANK(sBoxMonNicknames)","\tcall OpenSRAM","","\tld hl, sBoxMonNicknames","\tld de, wMonOrItemNameBuffer","\tld bc, MON_NAME_LENGTH","\tcall CopyBytes","","\tcall CloseSRAM","","\tld hl, BallSentToPCText","\tcall PrintText","","\tcall RotateThreePalettesRight","\tcall LoadStandardFont","\tjr .return_from_capture","",".catch_bug_contest_mon","\tfarcall BugContest_SetCaughtContestMon","\tjr .return_from_capture","",".FinishTutorial:","\tld hl, Text_GotchaMonWasCaught","",".shake_and_break_free","\tcall PrintText","\tcall ClearSprites","",".return_from_capture","\tld a, [wBattleType]","\tcp BATTLETYPE_TUTORIAL","\tret z","\tcp BATTLETYPE_DEBUG","\tret z","\tcp BATTLETYPE_CONTEST","\tjr z, .used_park_ball","","\tld a, [wWildMon]","\tand a","\tjr z, .toss","","\tcall ClearBGPalettes","\tcall ClearTilemap","",".toss","\tld hl, wNumItems","\tinc a","\tld [wItemQuantityChangeBuffer], a","\tjp TossItem","",".used_park_ball","\tld hl, wParkBallsRemaining","\tdec [hl]","\tret"],"name":"PokeBallEffect","file":"engine/items/item_effects.asm","lineNo":196,"address":79278,"addressUsedBy":[]}