{"names":["BattleCommand_DamageCalc"],"callingMethods":["BattleCommand_ConstantDamage","CheckEnemyTurn","HitConfusion"],"methodsCalled":["Divide","GetBattleVar","GetUserItem","Multiply"],"methodAddressesUsed":[],"varsSet":["hDivisor","hMultiplier","hProduct"],"varsUsed":["hProduct","hQuotient","wCriticalHit"],"varAddressesUsed":["TypeBoostItems","hDividend","wCurDamage"],"constantsUsed":["BATTLE_VARS_MOVE_EFFECT","BATTLE_VARS_MOVE_TYPE","MAX_STAT_VALUE","MIN_NEUTRAL_DAMAGE"],"lines":["BattleCommand_DamageCalc:","; damagecalc","","; Return a damage value for move power d, player level e, enemy defense c and player attack b.","","; Return 1 if successful, else 0.","","\tld a, BATTLE_VARS_MOVE_EFFECT","\tcall GetBattleVar","","; Selfdestruct and Explosion halve defense.","\tcp EFFECT_SELFDESTRUCT","\tjr nz, .dont_selfdestruct","","\tsrl c","\tjr nz, .dont_selfdestruct","\tinc c","",".dont_selfdestruct","","; Variable-hit moves and Conversion can have a power of 0.","\tcp EFFECT_MULTI_HIT","\tjr z, .skip_zero_damage_check","","\tcp EFFECT_CONVERSION","\tjr z, .skip_zero_damage_check","","; No damage if move power is 0.","\tld a, d","\tand a","\tret z","",".skip_zero_damage_check","; Minimum defense value is 1.","\tld a, c","\tand a","\tjr nz, .not_dividing_by_zero","\tld c, 1",".not_dividing_by_zero","","\txor a","\tld hl, hDividend","\tld [hli], a","\tld [hli], a","\tld [hl], a","","; Level * 2","\tld a, e","\tadd a","\tjr nc, .level_not_overflowing","\tld [hl], 1",".level_not_overflowing","\tinc hl","\tld [hli], a","","; / 5","\tld a, 5","\tld [hld], a","\tpush bc","\tld b, 4","\tcall Divide","\tpop bc","","; + 2","\tinc [hl]","\tinc [hl]","","; * bp","\tinc hl","\tld [hl], d","\tcall Multiply","","; * Attack","\tld [hl], b","\tcall Multiply","","; / Defense","\tld [hl], c","\tld b, 4","\tcall Divide","","; / 50","\tld [hl], 50","\tld b, $4","\tcall Divide","","; Item boosts","\tcall GetUserItem","","\tld a, b","\tand a","\tjr z, .DoneItem","","\tld hl, TypeBoostItems","",".NextItem:","\tld a, [hli]","\tcp -1","\tjr z, .DoneItem","","; Item effect","\tcp b","\tld a, [hli]","\tjr nz, .NextItem","","; Type","\tld b, a","\tld a, BATTLE_VARS_MOVE_TYPE","\tcall GetBattleVar","\tcp b","\tjr nz, .DoneItem","","; * 100 + item effect amount","\tld a, c","\tadd 100","\tldh [hMultiplier], a","\tcall Multiply","","; / 100","\tld a, 100","\tldh [hDivisor], a","\tld b, 4","\tcall Divide","",".DoneItem:","; Critical hits","\tcall .CriticalMultiplier","","; Update wCurDamage (capped at 997).","\tld hl, wCurDamage","\tld b, [hl]","\tldh a, [hProduct + 3]","\tadd b","\tldh [hProduct + 3], a","\tjr nc, .dont_cap_1","","\tldh a, [hProduct + 2]","\tinc a","\tldh [hProduct + 2], a","\tand a","\tjr z, .Cap","",".dont_cap_1","\tldh a, [hProduct]","\tld b, a","\tldh a, [hProduct + 1]","\tor a","\tjr nz, .Cap","","\tldh a, [hProduct + 2]","\tcp HIGH(MAX_STAT_VALUE - MIN_NEUTRAL_DAMAGE + 1)","\tjr c, .dont_cap_2","","\tcp HIGH(MAX_STAT_VALUE - MIN_NEUTRAL_DAMAGE + 1) + 1","\tjr nc, .Cap","","\tldh a, [hProduct + 3]","\tcp LOW(MAX_STAT_VALUE - MIN_NEUTRAL_DAMAGE + 1)","\tjr nc, .Cap","",".dont_cap_2","\tinc hl","","\tldh a, [hProduct + 3]","\tld b, [hl]","\tadd b","\tld [hld], a","","\tldh a, [hProduct + 2]","\tld b, [hl]","\tadc b","\tld [hl], a","\tjr c, .Cap","","\tld a, [hl]","\tcp HIGH(MAX_STAT_VALUE - MIN_NEUTRAL_DAMAGE + 1)","\tjr c, .dont_cap_3","","\tcp HIGH(MAX_STAT_VALUE - MIN_NEUTRAL_DAMAGE + 1) + 1","\tjr nc, .Cap","","\tinc hl","\tld a, [hld]","\tcp LOW(MAX_STAT_VALUE - MIN_NEUTRAL_DAMAGE + 1)","\tjr c, .dont_cap_3","",".Cap:","\tld a, HIGH(MAX_STAT_VALUE - MIN_NEUTRAL_DAMAGE)","\tld [hli], a","\tld a, LOW(MAX_STAT_VALUE - MIN_NEUTRAL_DAMAGE)","\tld [hld], a","",".dont_cap_3","; Minimum neutral damage is 2 (bringing the cap to 999).","\tinc hl","\tld a, [hl]","\tadd MIN_NEUTRAL_DAMAGE","\tld [hld], a","\tjr nc, .dont_floor","\tinc [hl]",".dont_floor","","\tld a, 1","\tand a","\tret","",".CriticalMultiplier:","\tld a, [wCriticalHit]","\tand a","\tret z","","; x2","\tldh a, [hQuotient + 3]","\tadd a","\tldh [hProduct + 3], a","","\tldh a, [hQuotient + 2]","\trl a","\tldh [hProduct + 2], a","","; Cap at $ffff.","\tret nc","","\tld a, $ff","\tldh [hProduct + 2], a","\tldh [hProduct + 3], a","","\tret"],"name":"BattleCommand_DamageCalc","file":"engine/battle/effect_commands.asm","lineNo":2941,"address":119214,"addressUsedBy":["AI_Smart_PriorityHit","AIDamageCalc"]}