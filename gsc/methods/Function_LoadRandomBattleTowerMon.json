{"names":["Function_LoadRandomBattleTowerMon"],"callingMethods":["Function_LoadOpponentTrainerAndPokemons"],"methodsCalled":["AddNTimes","CloseSRAM","CopyBytes","GetPokemonName","OpenSRAM","Random"],"methodAddressesUsed":[],"varsSet":["sBTMonPrevPrevTrainer1","sBTMonPrevPrevTrainer2","sBTMonPrevPrevTrainer3","sBTMonPrevTrainer1","sBTMonPrevTrainer2","sBTMonPrevTrainer3","wNamedObjectIndexBuffer"],"varsUsed":["hRandomAdd","sBTMonPrevPrevTrainer1","sBTMonPrevPrevTrainer2","sBTMonPrevPrevTrainer3","sBTMonPrevTrainer1","sBTMonPrevTrainer2","sBTMonPrevTrainer3","wBTChoiceOfLvlGroup","wBT_OTMon1","wBT_OTMon1Item","wBT_OTMon2","wBT_OTMon2Item","wBT_OTMon3","wBT_OTMon3Item","wNamedObjectIndexBuffer"],"varAddressesUsed":["sBTMonPrevTrainer1"],"constantsUsed":["BATTLETOWER_NUM_UNIQUE_MON","BATTLETOWER_PARTY_LENGTH","MON_NAME_LENGTH","NICKNAMED_MON_STRUCT_LENGTH","PARTYMON_STRUCT_LENGTH"],"lines":["Function_LoadRandomBattleTowerMon:","\tld c, BATTLETOWER_PARTY_LENGTH",".loop","\tpush bc","\tld a, BANK(sBTMonPrevTrainer1)","\tcall OpenSRAM","",".FindARandomBattleTowerMon:","\t; From Which LevelGroup are the mon loaded","\t; a \u003d 1..10","\tld a, [wBTChoiceOfLvlGroup]","\tdec a","\tld hl, BattleTowerMons","\tld bc, BATTLETOWER_NUM_UNIQUE_MON * NICKNAMED_MON_STRUCT_LENGTH","\tcall AddNTimes","","\tldh a, [hRandomAdd]","\tld b, a",".resample","\tcall Random","\tldh a, [hRandomAdd]","\tadd b","\tld b, a","\tmaskbits BATTLETOWER_NUM_UNIQUE_MON","\tcp BATTLETOWER_NUM_UNIQUE_MON","\tjr nc, .resample","\t; in register \u0027a\u0027 is the chosen mon of the LevelGroup","","\t; Check if mon was already loaded before","\t; Check current and the 2 previous teams","\t; includes check if item is double at the current team","\tld bc, NICKNAMED_MON_STRUCT_LENGTH","\tcall AddNTimes","\tld a, [hli]","\tld b, a","\tld a, [hld]","\tld c, a","\tld a, [wBT_OTMon1]","\tcp b","\tjr z, .FindARandomBattleTowerMon","\tld a, [wBT_OTMon1Item]","\tcp c","\tjr z, .FindARandomBattleTowerMon","\tld a, [wBT_OTMon2]","\tcp b","\tjr z, .FindARandomBattleTowerMon","\tld a, [wBT_OTMon2Item]","\tcp c","\tjr z, .FindARandomBattleTowerMon","\tld a, [wBT_OTMon3]","\tcp b","\tjr z, .FindARandomBattleTowerMon","\tld a, [wBT_OTMon3Item]","\tcp c","\tjr z, .FindARandomBattleTowerMon","\tld a, [sBTMonPrevTrainer1]","\tcp b","\tjr z, .FindARandomBattleTowerMon","\tld a, [sBTMonPrevTrainer2]","\tcp b","\tjr z, .FindARandomBattleTowerMon","\tld a, [sBTMonPrevTrainer3]","\tcp b","\tjr z, .FindARandomBattleTowerMon","\tld a, [sBTMonPrevPrevTrainer1]","\tcp b","\tjr z, .FindARandomBattleTowerMon","\tld a, [sBTMonPrevPrevTrainer2]","\tcp b","\tjr z, .FindARandomBattleTowerMon","\tld a, [sBTMonPrevPrevTrainer3]","\tcp b","\tjr z, .FindARandomBattleTowerMon","","\tld bc, NICKNAMED_MON_STRUCT_LENGTH","\tcall CopyBytes","","\tld a, [wNamedObjectIndexBuffer]","\tpush af","\tpush de","\tld hl, -NICKNAMED_MON_STRUCT_LENGTH","\tadd hl, de","\tld a, [hl]","\tld [wNamedObjectIndexBuffer], a","\tld bc, PARTYMON_STRUCT_LENGTH","\tadd hl, bc","\tpush hl","\tcall GetPokemonName","\tld h, d","\tld l, e","\tpop de","\tld bc, MON_NAME_LENGTH","\tcall CopyBytes","","\tpop de","\tpop af","\tld [wNamedObjectIndexBuffer], a","\tpop bc","\tdec c","\tjp nz, .loop","","\tld a, [sBTMonPrevTrainer1]","\tld [sBTMonPrevPrevTrainer1], a","\tld a, [sBTMonPrevTrainer2]","\tld [sBTMonPrevPrevTrainer2], a","\tld a, [sBTMonPrevTrainer3]","\tld [sBTMonPrevPrevTrainer3], a","\tld a, [wBT_OTMon1]","\tld [sBTMonPrevTrainer1], a","\tld a, [wBT_OTMon2]","\tld [sBTMonPrevTrainer2], a","\tld a, [wBT_OTMon3]","\tld [sBTMonPrevTrainer3], a","\tcall CloseSRAM","\tret"],"name":"Function_LoadRandomBattleTowerMon","file":"engine/events/battle_tower/load_trainer.asm","lineNo":94,"address":315230,"addressUsedBy":[]}