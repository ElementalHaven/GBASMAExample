{"names":["DoPoisonStep"],"callingMethods":[],"methodsCalled":["CallScript","DelayFrame","FarCall","GetPartyParamLocation","PlaySFX","Predef","PrintText"],"methodAddressesUsed":["ChangeHappiness","GetPartyNick"],"varsSet":["wCurPartyMon","wPoisonStepFlagSum","wScriptVar"],"varsUsed":["wCurPartyMon","wPartyCount","wPoisonStepFlagSum"],"varAddressesUsed":["CheckPlayerPartyForFitMonPredef","LoadPoisonBGPalsPredef","wCurPartyMon","wPoisonStepDataEnd","wPoisonStepPartyFlags"],"constantsUsed":["HAPPINESS_POISONFAINT","MON_HP","MON_STATUS","SFX_POISON"],"lines":["DoPoisonStep::","\tld a, [wPartyCount]","\tand a","\tjr z, .no_faint","","\txor a","\tld c, wPoisonStepDataEnd - wPoisonStepData","\tld hl, wPoisonStepData",".loop_clearPoisonStepData","\tld [hli], a","\tdec c","\tjr nz, .loop_clearPoisonStepData","","\txor a","\tld [wCurPartyMon], a",".loop_check_poison","\tcall .DamageMonIfPoisoned","\tjr nc, .not_poisoned","; the output flag is stored in c, copy it to [wPoisonStepPartyFlags + [wCurPartyMon]]","; and set the corresponding flag in wPoisonStepFlagSum","\tld a, [wCurPartyMon]","\tld e, a","\tld d, 0","\tld hl, wPoisonStepPartyFlags","\tadd hl, de","\tld [hl], c","\tld a, [wPoisonStepFlagSum]","\tor c","\tld [wPoisonStepFlagSum], a","",".not_poisoned","\tld a, [wPartyCount]","\tld hl, wCurPartyMon","\tinc [hl]","\tcp [hl]","\tjr nz, .loop_check_poison","","\tld a, [wPoisonStepFlagSum]","\tand %10","\tjr nz, .someone_has_fainted","\tld a, [wPoisonStepFlagSum]","\tand %01","\tjr z, .no_faint","\tcall .PlayPoisonSFX","\txor a","\tret","",".someone_has_fainted","\tld a, BANK(.Script_MonFaintedToPoison)","\tld hl, .Script_MonFaintedToPoison","\tcall CallScript","\tscf","\tret","",".no_faint","\txor a","\tret","",".DamageMonIfPoisoned:","; check if mon is poisoned, return if not","\tld a, MON_STATUS","\tcall GetPartyParamLocation","\tld a, [hl]","\tand 1 \u003c\u003c PSN","\tret z","","; check if mon is already fainted, return if so","\tld a, MON_HP","\tcall GetPartyParamLocation","\tld a, [hli]","\tld b, a","\tld c, [hl]","\tor c","\tret z","","; do 1 HP damage","\tdec bc","\tld [hl], c","\tdec hl","\tld [hl], b","","; check if mon has fainted as a result of poison damage","\tld a, b","\tor c","\tjr nz, .not_fainted","","; the mon has fainted, reset its status, set carry, and return %10","\tld a, MON_STATUS","\tcall GetPartyParamLocation","\tld [hl], 0","\tld c, %10","\tscf","\tret","",".not_fainted","; set carry and return %01","\tld c, %01","\tscf","\tret","",".PlayPoisonSFX:","\tld de, SFX_POISON","\tcall PlaySFX","\tld b, $2","\tpredef LoadPoisonBGPals","\tcall DelayFrame","\tret","",".Script_MonFaintedToPoison:","\tcallasm .PlayPoisonSFX","\topentext","\tcallasm .CheckWhitedOut","\tiffalse .whiteout","\tclosetext","\tend","",".whiteout","\tfarsjump Script_OverworldWhiteout","",".CheckWhitedOut:","\txor a","\tld [wCurPartyMon], a","\tld de, wPoisonStepPartyFlags",".party_loop","\tpush de","\tld a, [de]","\tand %10","\tjr z, .mon_not_fainted","\tld c, HAPPINESS_POISONFAINT","\tfarcall ChangeHappiness","\tfarcall GetPartyNick","\tld hl, .PoisonFaintText","\tcall PrintText","",".mon_not_fainted","\tpop de","\tinc de","\tld hl, wCurPartyMon","\tinc [hl]","\tld a, [wPartyCount]","\tcp [hl]","\tjr nz, .party_loop","\tpredef CheckPlayerPartyForFitMon","\tld a, d","\tld [wScriptVar], a","\tret","",".PoisonFaintText:","\ttext_far _PoisonFaintText","\ttext_end","",".PoisonWhiteoutText:","\ttext_far _PoisonWhiteoutText","\ttext_end"],"name":"DoPoisonStep","file":"engine/events/poisonstep.asm","lineNo":1,"address":160773,"addressUsedBy":[]}