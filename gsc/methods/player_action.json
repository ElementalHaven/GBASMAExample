{"names":["player_action"],"callingMethods":[],"methodsCalled":["CheckSFX","FarCall","GetTileCollision","PlaySFX","UpdatePlayerSprite"],"methodAddressesUsed":["IsNPCAtCoord"],"varsSet":["hMapObjectIndexBuffer","wPlayerState"],"varsUsed":["wFacingDirection","wPlayerStandingMapX","wPlayerStandingMapY","wPlayerState","wTilePermissions","wWalkingDirection","wWalkingTile","wWalkingX","wWalkingY"],"varAddressesUsed":["wBikeFlags"],"constantsUsed":["OBJECT_DIRECTION_WALKING","OBJECT_FLAGS2","OBJECT_PALETTE","OBJECT_RANGE","PLAYER_NORMAL","SFX_BUMP"],"lines":["player_action: MACRO","; walk direction, facing, x movement, y movement, tile collision pointer","\tdb \\1, \\2, \\3, \\4","\tdw \\5","ENDM","",".action_table:",".action_table_1","\tplayer_action STANDING, FACE_CURRENT, 0,  0, wPlayerStandingTile",".action_table_1_end","\tplayer_action RIGHT,    FACE_RIGHT,   1,  0, wTileRight","\tplayer_action LEFT,     FACE_LEFT,   -1,  0, wTileLeft","\tplayer_action UP,       FACE_UP,      0, -1, wTileUp","\tplayer_action DOWN,     FACE_DOWN,    0,  1, wTileDown","",".CheckNPC:","; Returns 0 if there is an NPC in front that you can\u0027t move","; Returns 1 if there is no NPC in front","; Returns 2 if there is a movable NPC in front","\tld a, 0","\tldh [hMapObjectIndexBuffer], a","; Load the next X coordinate into d","\tld a, [wPlayerStandingMapX]","\tld d, a","\tld a, [wWalkingX]","\tadd d","\tld d, a","; Load the next Y coordinate into e","\tld a, [wPlayerStandingMapY]","\tld e, a","\tld a, [wWalkingY]","\tadd e","\tld e, a","; Find an object struct with coordinates equal to d,e","\tld bc, wObjectStructs ; redundant","\tfarcall IsNPCAtCoord","\tjr nc, .is_npc","\tcall .CheckStrengthBoulder","\tjr c, .no_bump","","\txor a","\tret","",".is_npc","\tld a, 1","\tret","",".no_bump","\tld a, 2","\tret","",".CheckStrengthBoulder:","\tld hl, wBikeFlags","\tbit BIKEFLAGS_STRENGTH_ACTIVE_F, [hl]","\tjr z, .not_boulder","","\tld hl, OBJECT_DIRECTION_WALKING","\tadd hl, bc","\tld a, [hl]","\tcp STANDING","\tjr nz, .not_boulder","","\tld hl, OBJECT_PALETTE","\tadd hl, bc","\tbit STRENGTH_BOULDER_F, [hl]","\tjr z, .not_boulder","","\tld hl, OBJECT_FLAGS2","\tadd hl, bc","\tset 2, [hl]","","\tld a, [wWalkingDirection]","\tld d, a","\tld hl, OBJECT_RANGE","\tadd hl, bc","\tld a, [hl]","\tand %11111100","\tor d","\tld [hl], a","","\tscf","\tret","",".not_boulder","\txor a","\tret","",".CheckLandPerms:","; Return 0 if walking onto land and tile permissions allow it.","; Otherwise, return carry.","","\tld a, [wTilePermissions]","\tld d, a","\tld a, [wFacingDirection]","\tand d","\tjr nz, .NotWalkable","","\tld a, [wWalkingTile]","\tcall .CheckWalkable","\tjr c, .NotWalkable","","\txor a","\tret","",".NotWalkable:","\tscf","\tret","",".CheckSurfPerms:","; Return 0 if moving in water, or 1 if moving onto land.","; Otherwise, return carry.","","\tld a, [wTilePermissions]","\tld d, a","\tld a, [wFacingDirection]","\tand d","\tjr nz, .NotSurfable","","\tld a, [wWalkingTile]","\tcall .CheckSurfable","\tjr c, .NotSurfable","","\tand a","\tret","",".NotSurfable:","\tscf","\tret","",".BikeCheck:","\tld a, [wPlayerState]","\tcp PLAYER_BIKE","\tret z","\tcp PLAYER_SKATE","\tret","",".CheckWalkable:","; Return 0 if tile a is land. Otherwise, return carry.","","\tcall GetTileCollision","\tand a ; LAND_TILE","\tret z","\tscf","\tret","",".CheckSurfable:","; Return 0 if tile a is water, or 1 if land.","; Otherwise, return carry.","","\tcall GetTileCollision","\tcp WATER_TILE","\tjr z, .Water","","; Can walk back onto land from water.","\tand a ; LAND_TILE","\tjr z, .Land","","\tjr .Neither","",".Water:","\txor a","\tret","",".Land:","\tld a, 1","\tand a","\tret","",".Neither:","\tscf","\tret","",".BumpSound:","\tcall CheckSFX","\tret c","\tld de, SFX_BUMP","\tcall PlaySFX","\tret","",".GetOutOfWater:","\tpush bc","\tld a, PLAYER_NORMAL","\tld [wPlayerState], a","\tcall UpdatePlayerSprite ; UpdateSprites","\tpop bc","\tret"],"name":"player_action","file":"engine/overworld/player_movement.asm","lineNo":604,"address":170770,"addressUsedBy":[]}