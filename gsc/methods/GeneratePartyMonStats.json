{"names":["GeneratePartyMonStats"],"callingMethods":["BugContest_SetCaughtContestMon","TryAddMonToParty"],"methodsCalled":["AddNTimes","CalcMonStatC","CalcMonStats","CheckCaughtMon","CopyBytes","FarCall","FillPP","GetBaseData","Predef","Random","SetSeenAndCaughtMon"],"methodAddressesUsed":["CalcExpAtLevel","GetTrainerDVs","UpdateUnownDex"],"varsSet":["wCurSpecies","wEvolutionOldSpecies","wTempSpecies"],"varsUsed":["hProduct","wBaseDexNo","wBattleMode","wCurPartyLevel","wCurPartySpecies","wEnemyMonDVs","wEnemyMonItem","wMonType","wPartyCount","wPlayerID","wTempSpecies"],"varAddressesUsed":["FillMovesPredef","GetUnownLetterPredef","wEnemyMonMaxHP","wEnemyMonMoves","wEnemyMonPP","wEnemyMonStatus","wPartyMon1DVs"],"constantsUsed":["BASE_HAPPINESS","FALSE","MON_DVS","MON_MAXHP","MON_STAT_EXP","NUM_MOVES","PARTYMON_STRUCT_LENGTH"],"lines":["GeneratePartyMonStats:","; wBattleMode specifies whether it\u0027s a wild mon or not.","; wMonType specifies whether it\u0027s an opposing mon or not.","; wCurPartySpecies/wCurPartyLevel specify the species and level.","; hl points to the wPartyMon struct to fill.","","\tld e, l","\tld d, h","\tpush hl","","\t; Initialize the species","\tld a, [wCurPartySpecies]","\tld [wCurSpecies], a","\tcall GetBaseData","\tld a, [wBaseDexNo]","\tld [de], a","\tinc de","","\t; Copy the item if it\u0027s a wild mon","\tld a, [wBattleMode]","\tand a","\tld a, $0","\tjr z, .skipitem","\tld a, [wEnemyMonItem]",".skipitem","\tld [de], a","\tinc de","","\t; Copy the moves if it\u0027s a wild mon","\tpush de","\tld h, d","\tld l, e","\tld a, [wBattleMode]","\tand a","\tjr z, .randomlygeneratemoves","\tld a, [wMonType]","\tand a","\tjr nz, .randomlygeneratemoves","\tld de, wEnemyMonMoves","rept NUM_MOVES - 1","\tld a, [de]","\tinc de","\tld [hli], a","endr","\tld a, [de]","\tld [hl], a","\tjr .next","",".randomlygeneratemoves","\txor a","rept NUM_MOVES - 1","\tld [hli], a","endr","\tld [hl], a","\tld [wEvolutionOldSpecies], a","\tpredef FillMoves","",".next","\tpop de","rept NUM_MOVES","\tinc de","endr","","\t; Initialize ID.","\tld a, [wPlayerID]","\tld [de], a","\tinc de","\tld a, [wPlayerID + 1]","\tld [de], a","\tinc de","","\t; Initialize Exp.","\tpush de","\tld a, [wCurPartyLevel]","\tld d, a","\tcallfar CalcExpAtLevel","\tpop de","\tldh a, [hProduct + 1]","\tld [de], a","\tinc de","\tldh a, [hProduct + 2]","\tld [de], a","\tinc de","\tldh a, [hProduct + 3]","\tld [de], a","\tinc de","","\t; Initialize stat experience.","\txor a","\tld b, MON_DVS - MON_STAT_EXP",".loop","\tld [de], a","\tinc de","\tdec b","\tjr nz, .loop","","\tpop hl","\tpush hl","\tld a, [wMonType]","\tand $f","\tjr z, .registerpokedex","","\tpush hl","\tfarcall GetTrainerDVs","\tpop hl","\tjr .initializeDVs","",".registerpokedex","\tld a, [wCurPartySpecies]","\tld [wTempSpecies], a","\tdec a","\tpush de","\tcall CheckCaughtMon","\tld a, [wTempSpecies]","\tdec a","\tcall SetSeenAndCaughtMon","\tpop de","","\tpop hl","\tpush hl","\tld a, [wBattleMode]","\tand a","\tjr nz, .copywildmonDVs","","\tcall Random","\tld b, a","\tcall Random","\tld c, a",".initializeDVs","\tld a, b","\tld [de], a","\tinc de","\tld a, c","\tld [de], a","\tinc de","","\t; Initialize PP.","\tpush hl","\tpush de","\tinc hl","\tinc hl","\tcall FillPP","\tpop de","\tpop hl","rept NUM_MOVES","\tinc de","endr","","\t; Initialize happiness.","\tld a, BASE_HAPPINESS","\tld [de], a","\tinc de","","\txor a","\t; PokerusStatus","\tld [de], a","\tinc de","\t; CaughtData/CaughtTime/CaughtLevel","\tld [de], a","\tinc de","\t; CaughtGender/CaughtLocation","\tld [de], a","\tinc de","","\t; Initialize level.","\tld a, [wCurPartyLevel]","\tld [de], a","\tinc de","","\txor a","\t; Status","\tld [de], a","\tinc de","\t; Unused","\tld [de], a","\tinc de","","\t; Initialize HP.","\tld bc, MON_STAT_EXP - 1","\tadd hl, bc","\tld a, 1","\tld c, a","\tld b, FALSE","\tcall CalcMonStatC","\tldh a, [hProduct + 2]","\tld [de], a","\tinc de","\tldh a, [hProduct + 3]","\tld [de], a","\tinc de","\tjr .initstats","",".copywildmonDVs","\tld a, [wEnemyMonDVs]","\tld [de], a","\tinc de","\tld a, [wEnemyMonDVs + 1]","\tld [de], a","\tinc de","","\tpush hl","\tld hl, wEnemyMonPP","\tld b, NUM_MOVES",".wildmonpploop","\tld a, [hli]","\tld [de], a","\tinc de","\tdec b","\tjr nz, .wildmonpploop","\tpop hl","","\t; Initialize happiness.","\tld a, BASE_HAPPINESS","\tld [de], a","\tinc de","","\txor a","\t; PokerusStatus","\tld [de], a","\tinc de","\t; CaughtData/CaughtTime/CaughtLevel","\tld [de], a","\tinc de","\t; CaughtGender/CaughtLocation","\tld [de], a","\tinc de","","\t; Initialize level.","\tld a, [wCurPartyLevel]","\tld [de], a","\tinc de","","\tld hl, wEnemyMonStatus","\t; Copy wEnemyMonStatus","\tld a, [hli]","\tld [de], a","\tinc de","\t; Copy EnemyMonUnused","\tld a, [hli]","\tld [de], a","\tinc de","\t; Copy wEnemyMonHP","\tld a, [hli]","\tld [de], a","\tinc de","\tld a, [hl]","\tld [de], a","\tinc de","",".initstats","\tld a, [wBattleMode]","\tdec a","\tjr nz, .generatestats","\tld hl, wEnemyMonMaxHP","\tld bc, PARTYMON_STRUCT_LENGTH - MON_MAXHP","\tcall CopyBytes","\tpop hl","\tjr .registerunowndex","",".generatestats","\tpop hl","\tld bc, MON_STAT_EXP - 1","\tadd hl, bc","\tld b, FALSE","\tcall CalcMonStats","",".registerunowndex","\tld a, [wMonType]","\tand $f","\tjr nz, .done","\tld a, [wCurPartySpecies]","\tcp UNOWN","\tjr nz, .done","\tld hl, wPartyMon1DVs","\tld a, [wPartyCount]","\tdec a","\tld bc, PARTYMON_STRUCT_LENGTH","\tcall AddNTimes","\tpredef GetUnownLetter","\tcallfar UpdateUnownDex","",".done","\tscf ; When this function returns, the carry flag indicates success vs failure.","\tret"],"name":"GeneratePartyMonStats","file":"engine/pokemon/move_mon.asm","lineNo":81,"address":76941,"addressUsedBy":[]}