{"names":["BattleCommand_Sketch"],"callingMethods":[],"methodsCalled":["AnimateCurrentMove","AnimateFailedMove","CheckSubstituteOpp","ClearLastMove","GetBattleVar","GetBattleVarAddr","GetMoveAttr","GetMoveName","PrintDidntAffect","PrintNothingHappened","StdBattleTextbox","UserPartyAttr"],"methodAddressesUsed":[],"varsSet":["wNamedObjectIndexBuffer"],"varsUsed":["hBattleTurn","wBattleMode","wLinkMode"],"varAddressesUsed":["Moves","SketchedText","wBattleMonMoves","wBattleMonPP","wEnemyMonMoves","wWildMonMoves","wWildMonPP"],"constantsUsed":["BATTLE_VARS_LAST_COUNTER_MOVE_OPP","BATTLE_VARS_SUBSTATUS5_OPP","MON_MOVES","MON_PP","MOVE_PP","NUM_MOVES"],"lines":["BattleCommand_Sketch:","; sketch","","\tcall ClearLastMove","; Don\u0027t sketch during a link battle","\tld a, [wLinkMode]","\tand a","\tjr z, .not_linked","\tcall AnimateFailedMove","\tjp PrintNothingHappened","",".not_linked","; If the opponent has a substitute up, fail.","\tcall CheckSubstituteOpp","\tjp nz, .fail","; If the opponent is transformed, fail.","\tld a, BATTLE_VARS_SUBSTATUS5_OPP","\tcall GetBattleVarAddr","\tbit SUBSTATUS_TRANSFORMED, [hl]","\tjp nz, .fail","; Get the user\u0027s moveset in its party struct.","; This move replacement shall be permanent.","; Pointer will be in de.","\tld a, MON_MOVES","\tcall UserPartyAttr","\tld d, h","\tld e, l","; Get the battle move structs.","\tld hl, wBattleMonMoves","\tldh a, [hBattleTurn]","\tand a","\tjr z, .get_last_move","\tld hl, wEnemyMonMoves",".get_last_move","\tld a, BATTLE_VARS_LAST_COUNTER_MOVE_OPP","\tcall GetBattleVar","\tld [wNamedObjectIndexBuffer], a","\tld b, a","; Fail if move is invalid or is Struggle.","\tand a","\tjr z, .fail","\tcp STRUGGLE","\tjr z, .fail","; Fail if user already knows that move","\tld c, NUM_MOVES",".does_user_already_know_move","\tld a, [hli]","\tcp b","\tjr z, .fail","\tdec c","\tjr nz, .does_user_already_know_move","; Find Sketch in the user\u0027s moveset.","; Pointer in hl, and index in c.","\tdec hl","\tld c, NUM_MOVES",".find_sketch","\tdec c","\tld a, [hld]","\tcp SKETCH","\tjr nz, .find_sketch","\tinc hl","; The Sketched move is loaded to that slot.","\tld a, b","\tld [hl], a","; Copy the base PP from that move.","\tpush bc","\tpush hl","\tdec a","\tld hl, Moves + MOVE_PP","\tcall GetMoveAttr","\tpop hl","\tld bc, wBattleMonPP - wBattleMonMoves","\tadd hl, bc","\tld [hl], a","\tpop bc","","\tldh a, [hBattleTurn]","\tand a","\tjr z, .user_trainer","\tld a, [wBattleMode]","\tdec a","\tjr nz, .user_trainer","; wildmon","\tld a, [hl]","\tpush bc","\tld hl, wWildMonPP","\tld b, 0","\tadd hl, bc","\tld [hl], a","\tld hl, wWildMonMoves","\tadd hl, bc","\tpop bc","\tld [hl], b","\tjr .done_copy","",".user_trainer","\tld a, [hl]","\tpush af","\tld l, c","\tld h, 0","\tadd hl, de","\tld a, b","\tld [hl], a","\tpop af","\tld de, MON_PP - MON_MOVES","\tadd hl, de","\tld [hl], a",".done_copy","\tcall GetMoveName","\tcall AnimateCurrentMove","","\tld hl, SketchedText","\tjp StdBattleTextbox","",".fail","\tcall AnimateFailedMove","\tjp PrintDidntAffect"],"name":"BattleCommand_Sketch","file":"engine/battle/move_effects/sketch.asm","lineNo":1,"address":119813,"addressUsedBy":[]}