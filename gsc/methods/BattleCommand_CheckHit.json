{"names":["BattleCommand_CheckHit"],"callingMethods":["BattleCommand_OHKO"],"methodsCalled":["BattleRandom","CheckSubstituteOpp","DelayFrames","Divide","GetBattleVar","GetBattleVarAddr","GetOpponentItem","Multiply","ResetDamage","StdBattleTextbox"],"methodAddressesUsed":[],"varsSet":["hDivisor","hMultiplicand","hMultiplier","hQuotient","wAttackMissed"],"varsUsed":["hBattleTurn","hQuotient","wBattleWeather","wEnemyAccLevel","wEnemyEvaLevel","wEnemyMoveStruct","wPlayerAccLevel","wPlayerEvaLevel","wPlayerMoveStruct"],"varAddressesUsed":["AccuracyLevelMultipliers"],"constantsUsed":["BATTLE_VARS_MOVE_ANIM","BATTLE_VARS_MOVE_EFFECT","BATTLE_VARS_STATUS_OPP","BATTLE_VARS_SUBSTATUS1_OPP","BATTLE_VARS_SUBSTATUS3_OPP","BATTLE_VARS_SUBSTATUS4","BATTLE_VARS_SUBSTATUS5_OPP","MAX_STAT_LEVEL","MOVE_ACC"],"lines":["BattleCommand_CheckHit:","; checkhit","","\tcall .DreamEater","\tjp z, .Miss","","\tcall .Protect","\tjp nz, .Miss","","\tcall .DrainSub","\tjp z, .Miss","","\tcall .LockOn","\tret nz","","\tcall .FlyDigMoves","\tjp nz, .Miss","","\tcall .ThunderRain","\tret z","","\tcall .XAccuracy","\tret nz","","\t; Perfect-accuracy moves","\tld a, BATTLE_VARS_MOVE_EFFECT","\tcall GetBattleVar","\tcp EFFECT_ALWAYS_HIT","\tret z","","\tcall .StatModifiers","","\tld a, [wPlayerMoveStruct + MOVE_ACC]","\tld b, a","\tldh a, [hBattleTurn]","\tand a","\tjr z, .BrightPowder","\tld a, [wEnemyMoveStruct + MOVE_ACC]","\tld b, a","",".BrightPowder:","\tpush bc","\tcall GetOpponentItem","\tld a, b","\tcp HELD_BRIGHTPOWDER","\tld a, c ; % miss","\tpop bc","\tjr nz, .skip_brightpowder","","\tld c, a","\tld a, b","\tsub c","\tld b, a","\tjr nc, .skip_brightpowder","\tld b, 0","",".skip_brightpowder","\tld a, b","\tcp -1","\tjr z, .Hit","","\tcall BattleRandom","\tcp b","\tjr nc, .Miss","",".Hit:","\tret","",".Miss:","; Keep the damage value intact if we\u0027re using (Hi) Jump Kick.","\tld a, BATTLE_VARS_MOVE_EFFECT","\tcall GetBattleVar","\tcp EFFECT_JUMP_KICK","\tjr z, .Missed","\tcall ResetDamage","",".Missed:","\tld a, 1","\tld [wAttackMissed], a","\tret","",".DreamEater:","; Return z if we\u0027re trying to eat the dream of","; a monster that isn\u0027t sleeping.","\tld a, BATTLE_VARS_MOVE_EFFECT","\tcall GetBattleVar","\tcp EFFECT_DREAM_EATER","\tret nz","","\tld a, BATTLE_VARS_STATUS_OPP","\tcall GetBattleVar","\tand SLP","\tret","",".Protect:","; Return nz if the opponent is protected.","\tld a, BATTLE_VARS_SUBSTATUS1_OPP","\tcall GetBattleVar","\tbit SUBSTATUS_PROTECT, a","\tret z","","\tld c, 40","\tcall DelayFrames","","; \u0027protecting itself!\u0027","\tld hl, ProtectingItselfText","\tcall StdBattleTextbox","","\tld c, 40","\tcall DelayFrames","","\tld a, 1","\tand a","\tret","",".LockOn:","; Return nz if we are locked-on and aren\u0027t trying to use Earthquake,","; Fissure or Magnitude on a monster that is flying.","\tld a, BATTLE_VARS_SUBSTATUS5_OPP","\tcall GetBattleVarAddr","\tbit SUBSTATUS_LOCK_ON, [hl]","\tres SUBSTATUS_LOCK_ON, [hl]","\tret z","","\tld a, BATTLE_VARS_SUBSTATUS3_OPP","\tcall GetBattleVar","\tbit SUBSTATUS_FLYING, a","\tjr z, .LockedOn","","\tld a, BATTLE_VARS_MOVE_ANIM","\tcall GetBattleVar","","\tcp EARTHQUAKE","\tret z","\tcp FISSURE","\tret z","\tcp MAGNITUDE","\tret z","",".LockedOn:","\tld a, 1","\tand a","\tret","",".DrainSub:","; Return z if using an HP drain move on a substitute.","\tcall CheckSubstituteOpp","\tjr z, .not_draining_sub","","\tld a, BATTLE_VARS_MOVE_EFFECT","\tcall GetBattleVar","","\tcp EFFECT_LEECH_HIT","\tret z","\tcp EFFECT_DREAM_EATER","\tret z","",".not_draining_sub","\tld a, 1","\tand a","\tret","",".FlyDigMoves:","; Check for moves that can hit underground/flying opponents.","; Return z if the current move can hit the opponent.","","\tld a, BATTLE_VARS_SUBSTATUS3_OPP","\tcall GetBattleVar","\tand 1 \u003c\u003c SUBSTATUS_FLYING | 1 \u003c\u003c SUBSTATUS_UNDERGROUND","\tret z","","\tbit SUBSTATUS_FLYING, a","\tjr z, .DigMoves","","\tld a, BATTLE_VARS_MOVE_ANIM","\tcall GetBattleVar","","\tcp GUST","\tret z","\tcp WHIRLWIND","\tret z","\tcp THUNDER","\tret z","\tcp TWISTER","\tret","",".DigMoves:","\tld a, BATTLE_VARS_MOVE_ANIM","\tcall GetBattleVar","","\tcp EARTHQUAKE","\tret z","\tcp FISSURE","\tret z","\tcp MAGNITUDE","\tret","",".ThunderRain:","; Return z if the current move always hits in rain, and it is raining.","\tld a, BATTLE_VARS_MOVE_EFFECT","\tcall GetBattleVar","\tcp EFFECT_THUNDER","\tret nz","","\tld a, [wBattleWeather]","\tcp WEATHER_RAIN","\tret","",".XAccuracy:","\tld a, BATTLE_VARS_SUBSTATUS4","\tcall GetBattleVar","\tbit SUBSTATUS_X_ACCURACY, a","\tret","",".StatModifiers:","\tldh a, [hBattleTurn]","\tand a","","\t; load the user\u0027s accuracy into b and the opponent\u0027s evasion into c.","\tld hl, wPlayerMoveStruct + MOVE_ACC","\tld a, [wPlayerAccLevel]","\tld b, a","\tld a, [wEnemyEvaLevel]","\tld c, a","","\tjr z, .got_acc_eva","","\tld hl, wEnemyMoveStruct + MOVE_ACC","\tld a, [wEnemyAccLevel]","\tld b, a","\tld a, [wPlayerEvaLevel]","\tld c, a","",".got_acc_eva","\tcp b","\tjr c, .skip_foresight_check","","\t; if the target\u0027s evasion is greater than the user\u0027s accuracy,","\t; check the target\u0027s foresight status","\tld a, BATTLE_VARS_SUBSTATUS1_OPP","\tcall GetBattleVar","\tbit SUBSTATUS_IDENTIFIED, a","\tret nz","",".skip_foresight_check","\t; subtract evasion from 14","\tld a, MAX_STAT_LEVEL + 1","\tsub c","\tld c, a","\t; store the base move accuracy for math ops","\txor a","\tldh [hMultiplicand + 0], a","\tldh [hMultiplicand + 1], a","\tld a, [hl]","\tldh [hMultiplicand + 2], a","\tpush hl","\tld d, 2 ; do this twice, once for the user\u0027s accuracy and once for the target\u0027s evasion","",".accuracy_loop","\t; look up the multiplier from the table","\tpush bc","\tld hl, AccuracyLevelMultipliers","\tdec b","\tsla b","\tld c, b","\tld b, 0","\tadd hl, bc","\tpop bc","\t; multiply by the first byte in that row...","\tld a, [hli]","\tldh [hMultiplier], a","\tcall Multiply","\t; ... and divide by the second byte","\tld a, [hl]","\tldh [hDivisor], a","\tld b, 4","\tcall Divide","\t; minimum accuracy is $0001","\tldh a, [hQuotient + 3]","\tld b, a","\tldh a, [hQuotient + 2]","\tor b","\tjr nz, .min_accuracy","\tldh [hQuotient + 2], a","\tld a, 1","\tldh [hQuotient + 3], a","",".min_accuracy","\t; do the same thing to the target\u0027s evasion","\tld b, c","\tdec d","\tjr nz, .accuracy_loop","","\t; if the result is more than 2 bytes, max out at 100%","\tldh a, [hQuotient + 2]","\tand a","\tldh a, [hQuotient + 3]","\tjr z, .finish_accuracy","\tld a, $ff","",".finish_accuracy","\tpop hl","\tld [hl], a","\tret","","; Multiplier ratios for accuracy from modifier -6 to +6","; (for other stats, see data/battle/stat_multipliers.asm)."],"name":"BattleCommand_CheckHit","file":"engine/battle/effect_commands.asm","lineNo":1559,"address":118072,"addressUsedBy":[]}