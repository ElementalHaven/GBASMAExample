{"names":["GiveExperiencePoints"],"callingMethods":["UpdateBattleStateAndExperienceAfterEnemyFaint"],"methodsCalled":["AnimateExpBar","ApplyStatLevelMultiplierOnAllStats","BattleTextbox","BoostExp","CopyBytes","DelayFrames","Divide","EmptyBattleTextbox","FarCall","GetBaseData","GetNick","GetPartyParamLocation","LoadTilemapToTempTilemap","Multiply","PlaySFX","Predef","ResetBattleParticipants","SafeLoadTempTilemapToTilemap","StdBattleTextbox","Textbox","WaitPressAorB_BlinkCursor","WaitSFX"],"methodAddressesUsed":["ApplyStatusEffectOnPlayerStats","BadgeStatBoosts","CalcExpAtLevel","CalcLevel","LevelUpHappinessMod","Text_MonGainedExpPoint","UpdatePlayerHUD"],"varsSet":["hBGMapMode","hDividend","hDivisor","hMultiplicand","hMultiplier","hQuotient","wApplyStatLevelMultipliersToEnemy","wBattleMonLevel","wCurPartyLevel","wCurPartyMon","wCurSpecies","wMonType","wStringBuffer2","wTempByteValue","wTempLevel","wTempSpecies"],"varsUsed":["hQuotient","wBattleMode","wBattleParticipantsNotFainted","wCurBattleMon","wCurPartyLevel","wCurPartyMon","wCurSpecies","wEnemyMonBaseExp","wEnemyMonLevel","wInBattleTowerBattle","wLinkMode","wPartyCount","wPlayerID","wPlayerSubStatus5","wStringBuffer2","wTempByteValue","wTempLevel"],"varAddressesUsed":["BattleText_StringBuffer1GrewToLevel","CalcMonStatsPredef","CopyMonToTempMonPredef","LearnLevelMovesPredef","PrintTempMonStatsPredef","SmallFarFlagActionPredef","wBattleMonHP","wBattleMonMaxHP","wBattleParticipantsNotFainted","wEnemyMonBaseStats","wEvolvableFlags","wPartyMon1Species","wPartyMonNicknames","wPartySpecies"],"constantsUsed":["CHECK_FLAG","MAX_LEVEL","MON_ATK","MON_EXP","MON_HP","MON_ID","MON_ITEM","MON_LEVEL","MON_MAXHP","MON_PKRUS","MON_SPECIES","MON_STAT_EXP","NUM_EXP_STATS","PARTYMON_STRUCT_LENGTH","PARTY_LENGTH","SET_FLAG","SFX_HIT_END_OF_EXP_BAR","TRUE"],"lines":["GiveExperiencePoints:","; Give experience.","; Don\u0027t give experience if linked or in the Battle Tower.","\tld a, [wLinkMode]","\tand a","\tret nz","","\tld a, [wInBattleTowerBattle]","\tbit 0, a","\tret nz","","\tcall .EvenlyDivideExpAmongParticipants","\txor a","\tld [wCurPartyMon], a","\tld bc, wPartyMon1Species","",".loop","\tld hl, MON_HP","\tadd hl, bc","\tld a, [hli]","\tor [hl]","\tjp z, .next_mon ; fainted","","\tpush bc","\tld hl, wBattleParticipantsNotFainted","\tld a, [wCurPartyMon]","\tld c, a","\tld b, CHECK_FLAG","\tld d, 0","\tpredef SmallFarFlagAction","\tld a, c","\tand a","\tpop bc","\tjp z, .next_mon","","; give stat exp","\tld hl, MON_STAT_EXP + 1","\tadd hl, bc","\tld d, h","\tld e, l","\tld hl, wEnemyMonBaseStats - 1","\tpush bc","\tld c, NUM_EXP_STATS",".stat_exp_loop","\tinc hl","\tld a, [de]","\tadd [hl]","\tld [de], a","\tjr nc, .no_carry_stat_exp","\tdec de","\tld a, [de]","\tinc a","\tjr z, .stat_exp_maxed_out","\tld [de], a","\tinc de","",".no_carry_stat_exp","\tpush hl","\tpush bc","\tld a, MON_PKRUS","\tcall GetPartyParamLocation","\tld a, [hl]","\tand a","\tpop bc","\tpop hl","\tjr z, .stat_exp_awarded","\tld a, [de]","\tadd [hl]","\tld [de], a","\tjr nc, .stat_exp_awarded","\tdec de","\tld a, [de]","\tinc a","\tjr z, .stat_exp_maxed_out","\tld [de], a","\tinc de","\tjr .stat_exp_awarded","",".stat_exp_maxed_out","\tld a, $ff","\tld [de], a","\tinc de","\tld [de], a","",".stat_exp_awarded","\tinc de","\tinc de","\tdec c","\tjr nz, .stat_exp_loop","\txor a","\tldh [hMultiplicand + 0], a","\tldh [hMultiplicand + 1], a","\tld a, [wEnemyMonBaseExp]","\tldh [hMultiplicand + 2], a","\tld a, [wEnemyMonLevel]","\tldh [hMultiplier], a","\tcall Multiply","\tld a, 7","\tldh [hDivisor], a","\tld b, 4","\tcall Divide","; Boost Experience for traded Pokemon","\tpop bc","\tld hl, MON_ID","\tadd hl, bc","\tld a, [wPlayerID]","\tcp [hl]","\tjr nz, .boosted","\tinc hl","\tld a, [wPlayerID + 1]","\tcp [hl]","\tld a, 0","\tjr z, .no_boost","",".boosted","\tcall BoostExp","\tld a, 1","",".no_boost","; Boost experience for a Trainer Battle","\tld [wStringBuffer2 + 2], a","\tld a, [wBattleMode]","\tdec a","\tcall nz, BoostExp","; Boost experience for Lucky Egg","\tpush bc","\tld a, MON_ITEM","\tcall GetPartyParamLocation","\tld a, [hl]","\tcp LUCKY_EGG","\tcall z, BoostExp","\tldh a, [hQuotient + 3]","\tld [wStringBuffer2 + 1], a","\tldh a, [hQuotient + 2]","\tld [wStringBuffer2], a","\tld a, [wCurPartyMon]","\tld hl, wPartyMonNicknames","\tcall GetNick","\tld hl, Text_MonGainedExpPoint","\tcall BattleTextbox","\tld a, [wStringBuffer2 + 1]","\tldh [hQuotient + 3], a","\tld a, [wStringBuffer2]","\tldh [hQuotient + 2], a","\tpop bc","\tcall AnimateExpBar","\tpush bc","\tcall LoadTilemapToTempTilemap","\tpop bc","\tld hl, MON_EXP + 2","\tadd hl, bc","\tld d, [hl]","\tldh a, [hQuotient + 3]","\tadd d","\tld [hld], a","\tld d, [hl]","\tldh a, [hQuotient + 2]","\tadc d","\tld [hl], a","\tjr nc, .no_exp_overflow","\tdec hl","\tinc [hl]","\tjr nz, .no_exp_overflow","\tld a, $ff","\tld [hli], a","\tld [hli], a","\tld [hl], a","",".no_exp_overflow","\tld a, [wCurPartyMon]","\tld e, a","\tld d, 0","\tld hl, wPartySpecies","\tadd hl, de","\tld a, [hl]","\tld [wCurSpecies], a","\tcall GetBaseData","\tpush bc","\tld d, MAX_LEVEL","\tcallfar CalcExpAtLevel","\tpop bc","\tld hl, MON_EXP + 2","\tadd hl, bc","\tpush bc","\tldh a, [hQuotient + 1]","\tld b, a","\tldh a, [hQuotient + 2]","\tld c, a","\tldh a, [hQuotient + 3]","\tld d, a","\tld a, [hld]","\tsub d","\tld a, [hld]","\tsbc c","\tld a, [hl]","\tsbc b","\tjr c, .not_max_exp","\tld a, b","\tld [hli], a","\tld a, c","\tld [hli], a","\tld a, d","\tld [hld], a","",".not_max_exp","; Check if the mon leveled up","\txor a ; PARTYMON","\tld [wMonType], a","\tpredef CopyMonToTempMon","\tcallfar CalcLevel","\tpop bc","\tld hl, MON_LEVEL","\tadd hl, bc","\tld a, [hl]","\tcp MAX_LEVEL","\tjp nc, .next_mon","\tcp d","\tjp z, .next_mon","; \u003cNICKNAME\u003e grew to level ##!","\tld [wTempLevel], a","\tld a, [wCurPartyLevel]","\tpush af","\tld a, d","\tld [wCurPartyLevel], a","\tld [hl], a","\tld hl, MON_SPECIES","\tadd hl, bc","\tld a, [hl]","\tld [wCurSpecies], a","\tld [wTempSpecies], a ; unused?","\tcall GetBaseData","\tld hl, MON_MAXHP + 1","\tadd hl, bc","\tld a, [hld]","\tld e, a","\tld d, [hl]","\tpush de","\tld hl, MON_MAXHP","\tadd hl, bc","\tld d, h","\tld e, l","\tld hl, MON_STAT_EXP - 1","\tadd hl, bc","\tpush bc","\tld b, TRUE","\tpredef CalcMonStats","\tpop bc","\tpop de","\tld hl, MON_MAXHP + 1","\tadd hl, bc","\tld a, [hld]","\tsub e","\tld e, a","\tld a, [hl]","\tsbc d","\tld d, a","\tdec hl","\tld a, [hl]","\tadd e","\tld [hld], a","\tld a, [hl]","\tadc d","\tld [hl], a","\tld a, [wCurBattleMon]","\tld d, a","\tld a, [wCurPartyMon]","\tcp d","\tjr nz, .skip_active_mon_update","\tld de, wBattleMonHP","\tld a, [hli]","\tld [de], a","\tinc de","\tld a, [hli]","\tld [de], a","\tld de, wBattleMonMaxHP","\tpush bc","\tld bc, PARTYMON_STRUCT_LENGTH - MON_MAXHP","\tcall CopyBytes","\tpop bc","\tld hl, MON_LEVEL","\tadd hl, bc","\tld a, [hl]","\tld [wBattleMonLevel], a","\tld a, [wPlayerSubStatus5]","\tbit SUBSTATUS_TRANSFORMED, a","\tjr nz, .transformed","\tld hl, MON_ATK","\tadd hl, bc","\tld de, wPlayerStats","\tld bc, PARTYMON_STRUCT_LENGTH - MON_ATK","\tcall CopyBytes","",".transformed","\txor a ; FALSE","\tld [wApplyStatLevelMultipliersToEnemy], a","\tcall ApplyStatLevelMultiplierOnAllStats","\tcallfar ApplyStatusEffectOnPlayerStats","\tcallfar BadgeStatBoosts","\tcallfar UpdatePlayerHUD","\tcall EmptyBattleTextbox","\tcall LoadTilemapToTempTilemap","\tld a, $1","\tldh [hBGMapMode], a","",".skip_active_mon_update","\tfarcall LevelUpHappinessMod","\tld a, [wCurBattleMon]","\tld b, a","\tld a, [wCurPartyMon]","\tcp b","\tjr z, .skip_exp_bar_animation","\tld de, SFX_HIT_END_OF_EXP_BAR","\tcall PlaySFX","\tcall WaitSFX","\tld hl, BattleText_StringBuffer1GrewToLevel","\tcall StdBattleTextbox","\tcall LoadTilemapToTempTilemap","",".skip_exp_bar_animation","\txor a ; PARTYMON","\tld [wMonType], a","\tpredef CopyMonToTempMon","\thlcoord 9, 0","\tld b, 10","\tld c, 9","\tcall Textbox","\thlcoord 11, 1","\tld bc, 4","\tpredef PrintTempMonStats","\tld c, 30","\tcall DelayFrames","\tcall WaitPressAorB_BlinkCursor","\tcall SafeLoadTempTilemapToTilemap","\txor a ; PARTYMON","\tld [wMonType], a","\tld a, [wCurSpecies]","\tld [wTempSpecies], a ; unused?","\tld a, [wCurPartyLevel]","\tpush af","\tld c, a","\tld a, [wTempLevel]","\tld b, a","",".level_loop","\tinc b","\tld a, b","\tld [wCurPartyLevel], a","\tpush bc","\tpredef LearnLevelMoves","\tpop bc","\tld a, b","\tcp c","\tjr nz, .level_loop","\tpop af","\tld [wCurPartyLevel], a","\tld hl, wEvolvableFlags","\tld a, [wCurPartyMon]","\tld c, a","\tld b, SET_FLAG","\tpredef SmallFarFlagAction","\tpop af","\tld [wCurPartyLevel], a","",".next_mon","\tld a, [wPartyCount]","\tld b, a","\tld a, [wCurPartyMon]","\tinc a","\tcp b","\tjr z, .done","\tld [wCurPartyMon], a","\tld a, MON_SPECIES","\tcall GetPartyParamLocation","\tld b, h","\tld c, l","\tjp .loop","",".done","\tjp ResetBattleParticipants","",".EvenlyDivideExpAmongParticipants:","; count number of battle participants","\tld a, [wBattleParticipantsNotFainted]","\tld b, a","\tld c, PARTY_LENGTH","\tld d, 0",".count_loop","\txor a","\tsrl b","\tadc d","\tld d, a","\tdec c","\tjr nz, .count_loop","\tcp 2","\tret c","","\tld [wTempByteValue], a","\tld hl, wEnemyMonBaseStats","\tld c, wEnemyMonEnd - wEnemyMonBaseStats",".base_stat_division_loop","\txor a","\tldh [hDividend + 0], a","\tld a, [hl]","\tldh [hDividend + 1], a","\tld a, [wTempByteValue]","\tldh [hDivisor], a","\tld b, 2","\tcall Divide","\tldh a, [hQuotient + 3]","\tld [hli], a","\tdec c","\tjr nz, .base_stat_division_loop","\tret"],"name":"GiveExperiencePoints","file":"engine/battle/core.asm","lineNo":6973,"address":139707,"addressUsedBy":[]}