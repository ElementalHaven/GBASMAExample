{"names":["LongAnim_UpdateVariables"],"callingMethods":["_AnimateHPBar"],"methodsCalled":["ComputeHPBarPixels"],"methodAddressesUsed":[],"varsSet":["wCurHPAnimOldHP"],"varsUsed":[],"varAddressesUsed":["wCurHPAnimMaxHP","wCurHPAnimOldHP","wCurHPBarPixels"],"constantsUsed":[],"lines":["LongAnim_UpdateVariables:",".loop","\tld hl, wCurHPAnimOldHP","\tld a, [hli]","\tld e, a","\tld a, [hli]","\tld d, a","\tld a, e","\tcp [hl]","\tjr nz, .next","\tinc hl","\tld a, d","\tcp [hl]","\tjr nz, .next","\tscf","\tret","",".next","\tld l, e","\tld h, d","\tadd hl, bc","\tld a, l","\tld [wCurHPAnimOldHP], a","\tld a, h","\tld [wCurHPAnimOldHP + 1], a","\tpush hl","\tpush de","\tpush bc","\tld hl, wCurHPAnimMaxHP","\tld a, [hli]","\tld e, a","\tld a, [hli]","\tld d, a","\tld a, [hli]","\tld c, a","\tld a, [hli]","\tld b, a","\t; This routine is buggy. The result from ComputeHPBarPixels is stored","\t; in e. However, the pop de opcode deletes this result before it is even","\t; used. The game then proceeds as though it never deleted that output.","\t; To fix, uncomment the line below.","\tcall ComputeHPBarPixels","\t; ld a, e","\tpop bc","\tpop de","\tpop hl","\tld a, e ; Comment or delete this line to fix the above bug.","\tld hl, wCurHPBarPixels","\tcp [hl]","\tjr z, .loop","\tld [hl], a","\tand a","\tret"],"name":"LongAnim_UpdateVariables","file":"engine/battle/anim_hp_bar.asm","lineNo":145,"address":76655,"addressUsedBy":[]}