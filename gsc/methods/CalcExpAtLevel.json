{"names":["CalcExpAtLevel"],"callingMethods":["CalcLevel"],"methodsCalled":["Divide","Multiply"],"methodAddressesUsed":[],"varsSet":["hDivisor","hMultiplicand","hMultiplier"],"varsUsed":["hProduct","hQuotient","wBaseGrowthRate"],"varAddressesUsed":["GrowthRates"],"constantsUsed":[],"lines":["CalcExpAtLevel:","; (a/b)*n**3 + c*n**2 + d*n - e","\tld a, [wBaseGrowthRate]","\tadd a","\tadd a","\tld c, a","\tld b, 0","\tld hl, GrowthRates","\tadd hl, bc","; Cube the level","\tcall .LevelSquared","\tld a, d","\tldh [hMultiplier], a","\tcall Multiply","","; Multiply by a","\tld a, [hl]","\tand $f0","\tswap a","\tldh [hMultiplier], a","\tcall Multiply","; Divide by b","\tld a, [hli]","\tand $f","\tldh [hDivisor], a","\tld b, 4","\tcall Divide","; Push the cubic term to the stack","\tldh a, [hQuotient + 1]","\tpush af","\tldh a, [hQuotient + 2]","\tpush af","\tldh a, [hQuotient + 3]","\tpush af","; Square the level and multiply by the lower 7 bits of c","\tcall .LevelSquared","\tld a, [hl]","\tand $7f","\tldh [hMultiplier], a","\tcall Multiply","; Push the absolute value of the quadratic term to the stack","\tldh a, [hProduct + 1]","\tpush af","\tldh a, [hProduct + 2]","\tpush af","\tldh a, [hProduct + 3]","\tpush af","\tld a, [hli]","\tpush af","; Multiply the level by d","\txor a","\tldh [hMultiplicand + 0], a","\tldh [hMultiplicand + 1], a","\tld a, d","\tldh [hMultiplicand + 2], a","\tld a, [hli]","\tldh [hMultiplier], a","\tcall Multiply","; Subtract e","\tld b, [hl]","\tldh a, [hProduct + 3]","\tsub b","\tldh [hMultiplicand + 2], a","\tld b, 0","\tldh a, [hProduct + 2]","\tsbc b","\tldh [hMultiplicand + 1], a","\tldh a, [hProduct + 1]","\tsbc b","\tldh [hMultiplicand], a","; If bit 7 of c is set, c is negative; otherwise, it\u0027s positive","\tpop af","\tand $80","\tjr nz, .subtract","; Add c*n**2 to (d*n - e)","\tpop bc","\tldh a, [hProduct + 3]","\tadd b","\tldh [hMultiplicand + 2], a","\tpop bc","\tldh a, [hProduct + 2]","\tadc b","\tldh [hMultiplicand + 1], a","\tpop bc","\tldh a, [hProduct + 1]","\tadc b","\tldh [hMultiplicand], a","\tjr .done_quadratic","",".subtract","; Subtract c*n**2 from (d*n - e)","\tpop bc","\tldh a, [hProduct + 3]","\tsub b","\tldh [hMultiplicand + 2], a","\tpop bc","\tldh a, [hProduct + 2]","\tsbc b","\tldh [hMultiplicand + 1], a","\tpop bc","\tldh a, [hProduct + 1]","\tsbc b","\tldh [hMultiplicand], a","",".done_quadratic","; Add (a/b)*n**3 to (d*n - e +/- c*n**2)","\tpop bc","\tldh a, [hProduct + 3]","\tadd b","\tldh [hMultiplicand + 2], a","\tpop bc","\tldh a, [hProduct + 2]","\tadc b","\tldh [hMultiplicand + 1], a","\tpop bc","\tldh a, [hProduct + 1]","\tadc b","\tldh [hMultiplicand], a","\tret","",".LevelSquared:","\txor a","\tldh [hMultiplicand + 0], a","\tldh [hMultiplicand + 1], a","\tld a, d","\tldh [hMultiplicand + 2], a","\tldh [hMultiplier], a","\tjp Multiply"],"name":"CalcExpAtLevel","file":"engine/pokemon/experience.asm","lineNo":33,"address":162210,"addressUsedBy":["AnimateExpBar","GeneratePartyMonStats","GiveExperiencePoints","RareCandyEffect","CalcExpBar","SendMonIntoBox","LoadPinkPage","RetrieveBreedmon","DayCare_InitBreeding"]}