{"names":["CalcMagikarpLength"],"callingMethods":["CheckMagikarpLength"],"methodsCalled":["Divide","Multiply"],"methodAddressesUsed":[],"varsSet":["hDividend","hDivisor","hMultiplicand","hMultiplier","wTempByteValue"],"varsUsed":["hProduct","hQuotient","wTempByteValue"],"varAddressesUsed":["MagikarpLengths","wMagikarpLength"],"constantsUsed":[],"lines":["CalcMagikarpLength:","; Return Magikarp\u0027s length (in feet and inches) at wMagikarpLength (big endian).",";","; input:",";   de: wEnemyMonDVs",";   bc: wPlayerID","","; This function is poorly commented.","","; In short, it generates a value between 190 and 1786 using","; a Magikarp\u0027s DVs and its trainer ID. This value is further","; filtered in LoadEnemyMon to make longer Magikarp even rarer.","","; The value is generated from a lookup table.","; The index is determined by the dv xored with the player\u0027s trainer id.","","; bc \u003d rrc(dv[0]) ++ rrc(dv[1]) ^ rrc(id)","","; if bc \u003c 10:    [wMagikarpLength] \u003d c + 190","; if bc ≥ $ff00: [wMagikarpLength] \u003d c + 1370","; else:          [wMagikarpLength] \u003d z * 100 + (bc - x) / y","","; X, Y, and Z depend on the value of b as follows:","","; if b \u003d 0:        x \u003d   310,  y \u003d   2,  z \u003d  3","; if b \u003d 1:        x \u003d   710,  y \u003d   4,  z \u003d  4","; if b \u003d 2-9:      x \u003d  2710,  y \u003d  20,  z \u003d  5","; if b \u003d 10-29:    x \u003d  7710,  y \u003d  50,  z \u003d  6","; if b \u003d 30-68:    x \u003d 17710,  y \u003d 100,  z \u003d  7","; if b \u003d 69-126:   x \u003d 32710,  y \u003d 150,  z \u003d  8","; if b \u003d 127-185:  x \u003d 47710,  y \u003d 150,  z \u003d  9","; if b \u003d 186-224:  x \u003d 57710,  y \u003d 100,  z \u003d 10","; if b \u003d 225-243:  x \u003d 62710,  y \u003d  50,  z \u003d 11","; if b \u003d 244-251:  x \u003d 64710,  y \u003d  20,  z \u003d 12","; if b \u003d 252-253:  x \u003d 65210,  y \u003d   5,  z \u003d 13","; if b \u003d 254:      x \u003d 65410,  y \u003d   2,  z \u003d 14","","\t; bc \u003d rrc(dv[0]) ++ rrc(dv[1]) ^ rrc(id)","","\t; id","\tld h, b","\tld l, c","\tld a, [hli]","\tld b, a","\tld c, [hl]","\trrc b","\trrc c","","\t; dv","\tld a, [de]","\tinc de","\trrca","\trrca","\txor b","\tld b, a","","\tld a, [de]","\trrca","\trrca","\txor c","\tld c, a","","\t; if bc \u003c 10:","\t;     de \u003d bc + 190","\t;     break","","\tld a, b","\tand a","\tjr nz, .no","\tld a, c","\tcp 10","\tjr nc, .no","","\tld hl, 190","\tadd hl, bc","\tld d, h","\tld e, l","\tjr .done","",".no","","\tld hl, MagikarpLengths","\tld a, 2","\tld [wTempByteValue], a","",".read","\tld a, [hli]","\tld e, a","\tld a, [hli]","\tld d, a","\tcall .BCLessThanDE","\tjr nc, .next","","\t; c \u003d (bc - de) / [hl]","\tcall .BCMinusDE","\tld a, b","\tldh [hDividend + 0], a","\tld a, c","\tldh [hDividend + 1], a","\tld a, [hl]","\tldh [hDivisor], a","\tld b, 2","\tcall Divide","\tldh a, [hQuotient + 3]","\tld c, a","","\t; de \u003d c + 100 × (2 + i)","\txor a","\tldh [hMultiplicand + 0], a","\tldh [hMultiplicand + 1], a","\tld a, 100","\tldh [hMultiplicand + 2], a","\tld a, [wTempByteValue]","\tldh [hMultiplier], a","\tcall Multiply","\tld b, 0","\tldh a, [hProduct + 3]","\tadd c","\tld e, a","\tldh a, [hProduct + 2]","\tadc b","\tld d, a","\tjr .done","",".next","\tinc hl ; align to next triplet","\tld a, [wTempByteValue]","\tinc a","\tld [wTempByteValue], a","\tcp 16","\tjr c, .read","","\tcall .BCMinusDE","\tld hl, 1600","\tadd hl, bc","\tld d, h","\tld e, l","",".done","\t; convert from mm to feet and inches","\t; in \u003d mm / 25.4","\t; ft \u003d in / 12","","\t; hl \u003d de × 10","\tld h, d","\tld l, e","\tadd hl, hl","\tadd hl, hl","\tadd hl, de","\tadd hl, hl","","\t; hl \u003d hl / 254","\tld de, -254","\tld a, -1",".div_254","\tinc a","\tadd hl, de","\tjr c, .div_254","","\t; d, e \u003d hl / 12, hl % 12","\tld d, 0",".mod_12","\tcp 12","\tjr c, .ok","\tsub 12","\tinc d","\tjr .mod_12",".ok","\tld e, a","","\tld hl, wMagikarpLength","\tld [hl], d ; ft","\tinc hl","\tld [hl], e ; in","\tret","",".BCLessThanDE:","; Intention: Return bc \u003c de.","; Reality: Return b \u003c d.","\tld a, b","\tcp d","\tret c","\tret nc ; whoops","\tld a, c","\tcp e","\tret","",".BCMinusDE:","; bc -\u003d de","\tld a, c","\tsub e","\tld c, a","\tld a, b","\tsbc d","\tld b, a","\tret"],"name":"CalcMagikarpLength","file":"engine/events/magikarp.asm","lineNo":104,"address":252688,"addressUsedBy":["LoadEnemyMon"]}