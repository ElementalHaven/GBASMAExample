{"names":["LoadEnemyMon"],"callingMethods":["InitEnemyWildmon","LoadEnemyMonToSwitchTo"],"methodsCalled":["BattleRandom","ByteFill","CheckSleepingTreeMon","CheckUnownLetter","CopyBytes","FarCall","GetBaseData","GetPartyLocation","GetPokemonName","GetRoamMonDVs","GetRoamMonHP","InitEnemyMon","Predef","Random"],"methodAddressesUsed":["CalcMagikarpLength","GetTrainerDVs"],"varsSet":["wCurOTMon","wCurPartySpecies","wCurSpecies","wEnemyMonHP","wEnemyMonHappiness","wEnemyMonItem","wEnemyMonLevel","wEnemyMonSpecies","wEnemyMonStatus","wEvolutionOldSpecies","wNamedObjectIndexBuffer"],"varsUsed":["wBaseCatchRate","wBaseExp","wBaseItem1","wBaseItem2","wBattleMode","wBattleType","wCurPartyLevel","wCurPartyMon","wEnemyMonHP","wEnemyMonMaxHP","wEnemySubStatus5","wInBattleTowerBattle","wLinkMode","wMagikarpLength","wMapGroup","wMapNumber","wTempEnemyMonSpecies"],"varAddressesUsed":["CalcMonStatsPredef","FillMovesPredef","FillPPPredef","GetUnownLetterPredef","SmallFarFlagActionPredef","wBaseSpecialDefense","wBaseType1","wEnemyBackupDVs","wEnemyMonBaseStats","wEnemyMonDVs","wEnemyMonMaxHP","wEnemyMonMoves","wEnemyMonNick","wEnemyMonPP","wEnemyMonSpecies","wEnemyMonStatus","wEnemyMonType1","wOTPartyMon1HP","wOTPartyMon1Item","wOTPartyMon1Moves","wOTPartyMon1PP","wPlayerID","wPokedexSeen","wStringBuffer1"],"constantsUsed":["ATKDEFDV_SHINY","BASE_HAPPINESS","FALSE","MON_DVS","MON_NAME_LENGTH","MON_STAT_EXP","NO_ITEM","NUM_EXP_STATS","NUM_MOVES","SET_FLAG","SPDSPCDV_SHINY","TREEMON_SLEEP_TURNS"],"lines":["LoadEnemyMon:","; Initialize enemy monster parameters","; To do this we pull the species from wTempEnemyMonSpecies","","; Notes:",";   BattleRandom is used to ensure sync between Game Boys","","; Clear the whole enemy mon struct (wEnemyMon)","\txor a","\tld hl, wEnemyMonSpecies","\tld bc, wEnemyMonEnd - wEnemyMon","\tcall ByteFill","","; We don\u0027t need to be here if we\u0027re in a link battle","\tld a, [wLinkMode]","\tand a","\tjp nz, InitEnemyMon","","; and also not in a BattleTower-Battle","\tld a, [wInBattleTowerBattle]","\tbit 0, a","\tjp nz, InitEnemyMon","","; Make sure everything knows what species we\u0027re working with","\tld a, [wTempEnemyMonSpecies]","\tld [wEnemyMonSpecies], a","\tld [wCurSpecies], a","\tld [wCurPartySpecies], a","","; Grab the BaseData for this species","\tcall GetBaseData","","; Let\u0027s get the item:","","; Is the item predetermined?","\tld a, [wBattleMode]","\tdec a","\tjr z, .WildItem","","; If we\u0027re in a trainer battle, the item is in the party struct","\tld a, [wCurPartyMon]","\tld hl, wOTPartyMon1Item","\tcall GetPartyLocation ; bc \u003d PartyMon[wCurPartyMon] - wPartyMons","\tld a, [hl]","\tjr .UpdateItem","",".WildItem:","; In a wild battle, we pull from the item slots in BaseData","","; Force Item1","; Used for Ho-Oh, Lugia and Snorlax encounters","\tld a, [wBattleType]","\tcp BATTLETYPE_FORCEITEM","\tld a, [wBaseItem1]","\tjr z, .UpdateItem","","; Failing that, it\u0027s all up to chance",";  Effective chances:",";    75% None",";    23% Item1",";     2% Item2","","; 25% chance of getting an item","\tcall BattleRandom","\tcp 75 percent + 1","\tld a, NO_ITEM","\tjr c, .UpdateItem","","; From there, an 8% chance for Item2","\tcall BattleRandom","\tcp 8 percent ; 8% of 25% \u003d 2% Item2","\tld a, [wBaseItem1]","\tjr nc, .UpdateItem","\tld a, [wBaseItem2]","",".UpdateItem:","\tld [wEnemyMonItem], a","","; Initialize DVs","","; If we\u0027re in a trainer battle, DVs are predetermined","\tld a, [wBattleMode]","\tand a","\tjr z, .InitDVs","","\tld a, [wEnemySubStatus5]","\tbit SUBSTATUS_TRANSFORMED, a","\tjr z, .InitDVs","","; Unknown","\tld hl, wEnemyBackupDVs","\tld de, wEnemyMonDVs","\tld a, [hli]","\tld [de], a","\tinc de","\tld a, [hl]","\tld [de], a","\tjp .Happiness","",".InitDVs:","; Trainer DVs","","; All trainers have preset DVs, determined by class","; See GetTrainerDVs for more on that","\tfarcall GetTrainerDVs","; These are the DVs we\u0027ll use if we\u0027re actually in a trainer battle","\tld a, [wBattleMode]","\tdec a","\tjr nz, .UpdateDVs","","; Wild DVs","; Here\u0027s where the fun starts","","; Roaming monsters (Entei, Raikou) work differently","; They have their own structs, which are shorter than normal","\tld a, [wBattleType]","\tcp BATTLETYPE_ROAMING","\tjr nz, .NotRoaming","","; Grab HP","\tcall GetRoamMonHP","\tld a, [hl]","; Check if the HP has been initialized","\tand a","; We\u0027ll do something with the result in a minute","\tpush af","","; Grab DVs","\tcall GetRoamMonDVs","\tinc hl","\tld a, [hld]","\tld c, a","\tld b, [hl]","","; Get back the result of our check","\tpop af","; If the RoamMon struct has already been initialized, we\u0027re done","\tjr nz, .UpdateDVs","","; If it hasn\u0027t, we need to initialize the DVs","; (HP is initialized at the end of the battle)","\tcall GetRoamMonDVs","\tinc hl","\tcall BattleRandom","\tld [hld], a","\tld c, a","\tcall BattleRandom","\tld [hl], a","\tld b, a","; We\u0027re done with DVs","\tjr .UpdateDVs","",".NotRoaming:","; Register a contains wBattleType","","; Forced shiny battle type","; Used by Red Gyarados at Lake of Rage","\tcp BATTLETYPE_SHINY","\tjr nz, .GenerateDVs","","\tld b, ATKDEFDV_SHINY ; $ea","\tld c, SPDSPCDV_SHINY ; $aa","\tjr .UpdateDVs","",".GenerateDVs:","; Generate new random DVs","\tcall BattleRandom","\tld b, a","\tcall BattleRandom","\tld c, a","",".UpdateDVs:","; Input DVs in register bc","\tld hl, wEnemyMonDVs","\tld a, b","\tld [hli], a","\tld [hl], c","","; We\u0027ve still got more to do if we\u0027re dealing with a wild monster","\tld a, [wBattleMode]","\tdec a","\tjr nz, .Happiness","","; Species-specfic:","","; Unown","\tld a, [wTempEnemyMonSpecies]","\tcp UNOWN","\tjr nz, .Magikarp","","; Get letter based on DVs","\tld hl, wEnemyMonDVs","\tpredef GetUnownLetter","; Can\u0027t use any letters that haven\u0027t been unlocked","; If combined with forced shiny battletype, causes an infinite loop","\tcall CheckUnownLetter","\tjr c, .GenerateDVs ; try again","",".Magikarp:","; These filters are untranslated.","; They expect at wMagikarpLength a 2-byte value in mm,","; but the value is in feet and inches (one byte each).","","; The first filter is supposed to make very large Magikarp even rarer,","; by targeting those 1600 mm (\u003d 5\u00273\") or larger.","; After the conversion to feet, it is unable to target any,","; since the largest possible Magikarp is 5\u00273\", and $0503 \u003d 1283 mm.","\tld a, [wTempEnemyMonSpecies]","\tcp MAGIKARP","\tjr nz, .Happiness","","; Get Magikarp\u0027s length","\tld de, wEnemyMonDVs","\tld bc, wPlayerID","\tcallfar CalcMagikarpLength","","; No reason to keep going if length \u003e 1536 mm (i.e. if HIGH(length) \u003e 6 feet)","\tld a, [wMagikarpLength]","\tcp HIGH(1536) ; should be \"cp 5\", since 1536 mm \u003d 5\u00270\", but HIGH(1536) \u003d 6","\tjr nz, .CheckMagikarpArea","","; 5% chance of skipping both size checks","\tcall Random","\tcp 5 percent","\tjr c, .CheckMagikarpArea","; Try again if length \u003e\u003d 1616 mm (i.e. if LOW(length) \u003e\u003d 4 inches)","\tld a, [wMagikarpLength + 1]","\tcp LOW(1616) ; should be \"cp 4\", since 1616 mm \u003d 5\u00274\", but LOW(1616) \u003d 80","\tjr nc, .GenerateDVs","","; 20% chance of skipping this check","\tcall Random","\tcp 20 percent - 1","\tjr c, .CheckMagikarpArea","; Try again if length \u003e\u003d 1600 mm (i.e. if LOW(length) \u003e\u003d 3 inches)","\tld a, [wMagikarpLength + 1]","\tcp LOW(1600) ; should be \"cp 3\", since 1600 mm \u003d 5\u00273\", but LOW(1600) \u003d 64","\tjr nc, .GenerateDVs","",".CheckMagikarpArea:","; The \"jr z\" checks are supposed to be \"jr nz\".","","; Instead, all maps in GROUP_LAKE_OF_RAGE (Mahogany area)","; and Routes 20 and 44 are treated as Lake of Rage.","","; This also means Lake of Rage Magikarp can be smaller than ones","; caught elsewhere rather than the other way around.","","; Intended behavior enforces a minimum size at Lake of Rage.","; The real behavior prevents a minimum size in the Lake of Rage area.","","; Moreover, due to the check not being translated to feet+inches, all Magikarp","; smaller than 4\u00270\" may be caught by the filter, a lot more than intended.","\tld a, [wMapGroup]","\tcp GROUP_LAKE_OF_RAGE","\tjr z, .Happiness","\tld a, [wMapNumber]","\tcp MAP_LAKE_OF_RAGE","\tjr z, .Happiness","; 40% chance of not flooring","\tcall Random","\tcp 39 percent + 1","\tjr c, .Happiness","; Try again if length \u003c 1024 mm (i.e. if HIGH(length) \u003c 3 feet)","\tld a, [wMagikarpLength]","\tcp HIGH(1024) ; should be \"cp 3\", since 1024 mm \u003d 3\u00274\", but HIGH(1024) \u003d 4","\tjr c, .GenerateDVs ; try again","","; Finally done with DVs","",".Happiness:","; Set happiness","\tld a, BASE_HAPPINESS","\tld [wEnemyMonHappiness], a","; Set level","\tld a, [wCurPartyLevel]","\tld [wEnemyMonLevel], a","; Fill stats","\tld de, wEnemyMonMaxHP","\tld b, FALSE","\tld hl, wEnemyMonDVs - (MON_DVS - MON_STAT_EXP + 1)","\tpredef CalcMonStats","","; If we\u0027re in a trainer battle,","; get the rest of the parameters from the party struct","\tld a, [wBattleMode]","\tcp TRAINER_BATTLE","\tjr z, .OpponentParty","","; If we\u0027re in a wild battle, check wild-specific stuff","\tand a","\tjr z, .TreeMon","","\tld a, [wEnemySubStatus5]","\tbit SUBSTATUS_TRANSFORMED, a","\tjp nz, .Moves","",".TreeMon:","; If we\u0027re headbutting trees, some monsters enter battle asleep","\tcall CheckSleepingTreeMon","\tld a, TREEMON_SLEEP_TURNS","\tjr c, .UpdateStatus","; Otherwise, no status","\txor a","",".UpdateStatus:","\tld hl, wEnemyMonStatus","\tld [hli], a","","; Unused byte","\txor a","\tld [hli], a","","; Full HP..","\tld a, [wEnemyMonMaxHP]","\tld [hli], a","\tld a, [wEnemyMonMaxHP + 1]","\tld [hl], a","","; ..unless it\u0027s a RoamMon","\tld a, [wBattleType]","\tcp BATTLETYPE_ROAMING","\tjr nz, .Moves","","; Grab HP","\tcall GetRoamMonHP","\tld a, [hl]","; Check if it\u0027s been initialized again","\tand a","\tjr z, .InitRoamHP","; Update from the struct if it has","\tld a, [hl]","\tld [wEnemyMonHP + 1], a","\tjr .Moves","",".InitRoamHP:","; HP only uses the lo byte in the RoamMon struct since","; Raikou and Entei will have \u003c 256 hp at level 40","\tld a, [wEnemyMonHP + 1]","\tld [hl], a","\tjr .Moves","",".OpponentParty:","; Get HP from the party struct","\tld hl, (wOTPartyMon1HP + 1)","\tld a, [wCurPartyMon]","\tcall GetPartyLocation","\tld a, [hld]","\tld [wEnemyMonHP + 1], a","\tld a, [hld]","\tld [wEnemyMonHP], a","","; Make sure everything knows which monster the opponent is using","\tld a, [wCurPartyMon]","\tld [wCurOTMon], a","","; Get status from the party struct","\tdec hl","\tld a, [hl] ; OTPartyMonStatus","\tld [wEnemyMonStatus], a","",".Moves:","\tld hl, wBaseType1","\tld de, wEnemyMonType1","\tld a, [hli]","\tld [de], a","\tinc de","\tld a, [hl]","\tld [de], a","","; Get moves","\tld de, wEnemyMonMoves","; Are we in a trainer battle?","\tld a, [wBattleMode]","\tcp TRAINER_BATTLE","\tjr nz, .WildMoves","; Then copy moves from the party struct","\tld hl, wOTPartyMon1Moves","\tld a, [wCurPartyMon]","\tcall GetPartyLocation","\tld bc, NUM_MOVES","\tcall CopyBytes","\tjr .PP","",".WildMoves:","; Clear wEnemyMonMoves","\txor a","\tld h, d","\tld l, e","\tld [hli], a","\tld [hli], a","\tld [hli], a","\tld [hl], a","; Make sure the predef knows this isn\u0027t a partymon","\tld [wEvolutionOldSpecies], a","; Fill moves based on level","\tpredef FillMoves","",".PP:","; Trainer battle?","\tld a, [wBattleMode]","\tcp TRAINER_BATTLE","\tjr z, .TrainerPP","","; Fill wild PP","\tld hl, wEnemyMonMoves","\tld de, wEnemyMonPP","\tpredef FillPP","\tjr .Finish","",".TrainerPP:","; Copy PP from the party struct","\tld hl, wOTPartyMon1PP","\tld a, [wCurPartyMon]","\tcall GetPartyLocation","\tld de, wEnemyMonPP","\tld bc, NUM_MOVES","\tcall CopyBytes","",".Finish:","; Only the first five base stats are copied..","\tld hl, wBaseStats","\tld de, wEnemyMonBaseStats","\tld b, wBaseSpecialDefense - wBaseStats",".loop","\tld a, [hli]","\tld [de], a","\tinc de","\tdec b","\tjr nz, .loop","","\tld a, [wBaseCatchRate]","\tld [de], a","\tinc de","","\tld a, [wBaseExp]","\tld [de], a","","\tld a, [wTempEnemyMonSpecies]","\tld [wNamedObjectIndexBuffer], a","","\tcall GetPokemonName","","; Did we catch it?","\tld a, [wBattleMode]","\tand a","\tret z","","; Update enemy nick","\tld hl, wStringBuffer1","\tld de, wEnemyMonNick","\tld bc, MON_NAME_LENGTH","\tcall CopyBytes","","; Saw this mon","\tld a, [wTempEnemyMonSpecies]","\tdec a","\tld c, a","\tld b, SET_FLAG","\tld hl, wPokedexSeen","\tpredef SmallFarFlagAction","","\tld hl, wEnemyMonStats","\tld de, wEnemyStats","\tld bc, NUM_EXP_STATS * 2","\tcall CopyBytes","","\tret"],"name":"LoadEnemyMon","file":"engine/battle/core.asm","lineNo":5942,"address":138987,"addressUsedBy":["Function17e026","GivePoke","PokeBallEffect"]}