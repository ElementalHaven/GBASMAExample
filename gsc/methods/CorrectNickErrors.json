{"names":["CorrectNickErrors"],"callingMethods":[],"methodsCalled":[],"methodAddressesUsed":[],"varsSet":[],"varsUsed":[],"varAddressesUsed":[],"constantsUsed":["MON_NAME_LENGTH"],"lines":["CorrectNickErrors::","; error-check monster nick before use","; must be a peace offering to gamesharkers","","; input: de \u003d nick location","","\tpush bc","\tpush de","\tld b, MON_NAME_LENGTH","",".checkchar","; end of nick?","\tld a, [de]","\tcp \"@\" ; terminator","\tjr z, .end","","; check if this char is a text command","\tld hl, .textcommands","\tdec hl",".loop","; next entry","\tinc hl","; reached end of commands table?","\tld a, [hl]","\tcp -1","\tjr z, .done","","; is the current char between this value (inclusive)...","\tld a, [de]","\tcp [hl]","\tinc hl","\tjr c, .loop","; ...and this one?","\tcp [hl]","\tjr nc, .loop","","; replace it with a \"?\"","\tld a, \"?\"","\tld [de], a","\tjr .loop","",".done","; next char","\tinc de","; reached end of nick without finding a terminator?","\tdec b","\tjr nz, .checkchar","","; change nick to \"?@\"","\tpop de","\tpush de","\tld a, \"?\"","\tld [de], a","\tinc de","\tld a, \"@\"","\tld [de], a",".end","; if the nick has any errors at this point it\u0027s out of our hands","\tpop de","\tpop bc","\tret","",".textcommands","; table defining which characters are actually text commands","; format:","\t;      ≥           \u003c","\tdb \"\u003cNULL\u003e\",   \"ガ\"","\tdb \"\u003cPLAY_G\u003e\", \"\u003cJP_18\u003e\" + 1","\tdb \"\u003cNI\u003e\",     \"\u003cNO\u003e\"    + 1","\tdb \"\u003cROUTE\u003e\",  \"\u003cGREEN\u003e\" + 1","\tdb \"\u003cENEMY\u003e\",  \"\u003cENEMY\u003e\" + 1","\tdb \"\u003cMOM\u003e\",    \"\u003cTM\u003e\"    + 1","\tdb \"\u003cROCKET\u003e\", \"┘\"       + 1","\tdb -1 ; end"],"name":"CorrectNickErrors","file":"engine/pokemon/correct_nick_errors.asm","lineNo":1,"address":64401,"addressUsedBy":["LoadBluePage"]}